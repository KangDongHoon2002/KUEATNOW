{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kdonghoon\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\midtermProject_combined\\\\FE\\\\src\\\\components\\\\UserInputScreen\\\\UserInputScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { OpenAI } from 'openai';\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\nimport { db } from './firebase_config';\nimport './UserInputScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY\n});\nfunction UserInputScreen() {\n  _s();\n  const location = useLocation();\n  const {\n    menuList: initialMenuList,\n    selectedStore,\n    budget\n  } = location.state;\n  const [messages, setMessages] = useState([]);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [menuList, setMenuList] = useState(initialMenuList);\n  const [menuQuestionList, setMenuQuestionList] = useState([]);\n  const [menuResponseList, setMenuResponseList] = useState([]);\n  useEffect(() => {\n    addMessage(`안녕하세요! ${selectedStore}에서 예산 ${budget}원으로 먹고 싶은 음식을 찾아보겠습니다.`, false);\n    askQuestion();\n  }, []);\n  const addMessage = (content, isUser) => {\n    setMessages(prev => [...prev, {\n      content,\n      isUser\n    }]);\n  };\n  const askQuestion = async () => {\n    try {\n      const prompt = `\n사용자의 메뉴 선호도를 좁히는 데 도움이 될 다음 질문을 생성하세요.\n사용 가능한 메뉴: ${menuList.join(', ')}\n이전 응답: ${menuResponseList.length ? menuResponseList.join('; ') : '이전 응답 없음'}\n질문은 이분법적 선택을 유도하는 한 문장이어야 합니다.\n`;\n      const response = await openai.completions.create({\n        model: \"gpt-3.5-turbo-instruct\",\n        prompt: prompt,\n        max_tokens: 50\n      });\n      const question = response.choices[0].text.trim();\n      addMessage(question, false);\n      setMenuQuestionList(prev => [...prev, question]);\n    } catch (error) {\n      console.error('Error asking question:', error);\n      addMessage('죄송합니다. 오류가 발생했습니다.', false);\n    }\n  };\n  const handleSendMessage = async () => {\n    const userInput = document.getElementById('userInput').value.trim();\n    if (userInput) {\n      addMessage(userInput, true);\n      setMenuResponseList(prev => [...prev, userInput]);\n      setQuestionCount(prev => prev + 1);\n      document.getElementById('userInput').value = '';\n      if (questionCount < 5) {\n        try {\n          const prompt = `\n사용자와의 대화 기록을 바탕으로 가장 적합한 메뉴 3개를 추천하세요.\n메뉴 목록: ${menuList.join(', ')}\n대화 기록:\n${menuQuestionList.map((q, i) => `Q: ${q}\\nA: ${menuResponseList[i] || ''}`).join('\\n')}\nQ: ${menuQuestionList[menuQuestionList.length - 1]}\nA: ${userInput}\n\n추천 메뉴 3개를 쉼표로 구분하여 출력하세요.\n`;\n          const response = await openai.completions.create({\n            model: \"gpt-3.5-turbo-instruct\",\n            prompt: prompt,\n            max_tokens: 50\n          });\n          const recommendedMenus = response.choices[0].text.trim().split(',').map(menu => menu.trim());\n          addMessage(`추천 메뉴: ${recommendedMenus.join(', ')}`, false);\n          addMessage('이 중에서 마음에 드는 메뉴가 있나요? 있다면 선택해주세요. 없다면 \"없음\"이라고 말씀해주세요.', false);\n          if (userInput.toLowerCase() === '없음') {\n            setMenuList(prev => prev.filter(menu => !recommendedMenus.includes(menu)));\n            askQuestion();\n          } else if (recommendedMenus.includes(userInput)) {\n            await getRestaurants(userInput);\n          } else {\n            askQuestion();\n          }\n        } catch (error) {\n          console.error('Error recommending menu:', error);\n          addMessage('죄송합니다. 오류가 발생했습니다.', false);\n        }\n      } else {\n        addMessage('죄송합니다. 더 이상 질문할 수 없습니다. 추천된 메뉴 중에서 선택해주세요.', false);\n      }\n    }\n  };\n  const getRestaurants = async selectedMenu => {\n    try {\n      const menuRef = collection(db, \"menus\");\n      const q = query(menuRef, where(\"menu\", \"==\", selectedMenu));\n      const querySnapshot = await getDocs(q);\n      let restaurantList = [];\n      querySnapshot.forEach(doc => {\n        restaurantList.push(doc.data().restaurant);\n      });\n      const restaurantRef = collection(db, \"restaurants\");\n      const restaurantQuery = query(restaurantRef, where(\"name\", \"in\", restaurantList));\n      const restaurantSnapshot = await getDocs(restaurantQuery);\n      let reviews = [];\n      restaurantSnapshot.forEach(doc => {\n        const data = doc.data();\n        reviews.push({\n          name: data.name,\n          review: `[만족도] ${data.satisfaction} [분위기] ${data.atmosphere} [서비스] ${data.service} [맛] ${data.taste} [양] ${data.amount} [위생 상태] ${data.sanity}`\n        });\n      });\n      addMessage('어느 지역의 식당을 추천해드릴까요? (예: 고대사거리, 안암로터리 등)', false);\n      // 여기서 사용자의 지역 선택을 기다립니다.\n    } catch (error) {\n      console.error('Error fetching restaurants:', error);\n      addMessage('죄송합니다. 식당 정보를 가져오는 데 실패했습니다.', false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: \"\\uCFE0\\uC787\\uB098\\uC6B0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.isUser ? 'user' : 'bot'}`,\n        children: [!msg.isUser && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-bubble\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"userInput\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n        className: \"chat-input\",\n        onKeyPress: e => {\n          if (e.key === 'Enter') handleSendMessage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        children: \"\\u25B6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}\n_s(UserInputScreen, \"AqQUuvBo+wqudWhNz8c6KGiquwI=\", false, function () {\n  return [useLocation];\n});\n_c = UserInputScreen;\nexport default UserInputScreen;\nvar _c;\n$RefreshReg$(_c, \"UserInputScreen\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","OpenAI","collection","query","where","getDocs","db","jsxDEV","_jsxDEV","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","UserInputScreen","_s","location","menuList","initialMenuList","selectedStore","budget","state","messages","setMessages","questionCount","setQuestionCount","setMenuList","menuQuestionList","setMenuQuestionList","menuResponseList","setMenuResponseList","addMessage","askQuestion","content","isUser","prev","prompt","join","length","response","completions","create","model","max_tokens","question","choices","text","trim","error","console","handleSendMessage","userInput","document","getElementById","value","map","q","i","recommendedMenus","split","menu","toLowerCase","filter","includes","getRestaurants","selectedMenu","menuRef","querySnapshot","restaurantList","forEach","doc","push","data","restaurant","restaurantRef","restaurantQuery","restaurantSnapshot","reviews","name","review","satisfaction","atmosphere","service","taste","amount","sanity","className","children","fileName","_jsxFileName","lineNumber","columnNumber","msg","index","type","id","placeholder","onKeyPress","e","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Kdonghoon/OneDrive/바탕 화면/midtermProject_combined/FE/src/components/UserInputScreen/UserInputScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { OpenAI } from 'openai';\r\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\r\nimport { db } from './firebase_config';\r\nimport './UserInputScreen.css';\r\n\r\nconst openai = new OpenAI({ apiKey: process.env.REACT_APP_OPENAI_API_KEY });\r\n\r\nfunction UserInputScreen() {\r\n    const location = useLocation();\r\n    const { menuList: initialMenuList, selectedStore, budget } = location.state;\r\n    const [messages, setMessages] = useState([]);\r\n    const [questionCount, setQuestionCount] = useState(0);\r\n    const [menuList, setMenuList] = useState(initialMenuList);\r\n    const [menuQuestionList, setMenuQuestionList] = useState([]);\r\n    const [menuResponseList, setMenuResponseList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        addMessage(`안녕하세요! ${selectedStore}에서 예산 ${budget}원으로 먹고 싶은 음식을 찾아보겠습니다.`, false);\r\n        askQuestion();\r\n    }, []);\r\n\r\n    const addMessage = (content, isUser) => {\r\n        setMessages(prev => [...prev, { content, isUser }]);\r\n    };\r\n\r\n    const askQuestion = async () => {\r\n        try {\r\n            const prompt = `\r\n사용자의 메뉴 선호도를 좁히는 데 도움이 될 다음 질문을 생성하세요.\r\n사용 가능한 메뉴: ${menuList.join(', ')}\r\n이전 응답: ${menuResponseList.length ? menuResponseList.join('; ') : '이전 응답 없음'}\r\n질문은 이분법적 선택을 유도하는 한 문장이어야 합니다.\r\n`;\r\n            const response = await openai.completions.create({\r\n                model: \"gpt-3.5-turbo-instruct\",\r\n                prompt: prompt,\r\n                max_tokens: 50\r\n            });\r\n\r\n            const question = response.choices[0].text.trim();\r\n            addMessage(question, false);\r\n            setMenuQuestionList(prev => [...prev, question]);\r\n        } catch (error) {\r\n            console.error('Error asking question:', error);\r\n            addMessage('죄송합니다. 오류가 발생했습니다.', false);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        const userInput = document.getElementById('userInput').value.trim();\r\n        if (userInput) {\r\n            addMessage(userInput, true);\r\n            setMenuResponseList(prev => [...prev, userInput]);\r\n            setQuestionCount(prev => prev + 1);\r\n            document.getElementById('userInput').value = '';\r\n\r\n            if (questionCount < 5) {\r\n                try {\r\n                    const prompt = `\r\n사용자와의 대화 기록을 바탕으로 가장 적합한 메뉴 3개를 추천하세요.\r\n메뉴 목록: ${menuList.join(', ')}\r\n대화 기록:\r\n${menuQuestionList.map((q, i) => `Q: ${q}\\nA: ${menuResponseList[i] || ''}`).join('\\n')}\r\nQ: ${menuQuestionList[menuQuestionList.length - 1]}\r\nA: ${userInput}\r\n\r\n추천 메뉴 3개를 쉼표로 구분하여 출력하세요.\r\n`;\r\n                    const response = await openai.completions.create({\r\n                        model: \"gpt-3.5-turbo-instruct\",\r\n                        prompt: prompt,\r\n                        max_tokens: 50\r\n                    });\r\n\r\n                    const recommendedMenus = response.choices[0].text.trim().split(',').map(menu => menu.trim());\r\n                    addMessage(`추천 메뉴: ${recommendedMenus.join(', ')}`, false);\r\n                    addMessage('이 중에서 마음에 드는 메뉴가 있나요? 있다면 선택해주세요. 없다면 \"없음\"이라고 말씀해주세요.', false);\r\n\r\n                    if (userInput.toLowerCase() === '없음') {\r\n                        setMenuList(prev => prev.filter(menu => !recommendedMenus.includes(menu)));\r\n                        askQuestion();\r\n                    } else if (recommendedMenus.includes(userInput)) {\r\n                        await getRestaurants(userInput);\r\n                    } else {\r\n                        askQuestion();\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error recommending menu:', error);\r\n                    addMessage('죄송합니다. 오류가 발생했습니다.', false);\r\n                }\r\n            } else {\r\n                addMessage('죄송합니다. 더 이상 질문할 수 없습니다. 추천된 메뉴 중에서 선택해주세요.', false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const getRestaurants = async (selectedMenu) => {\r\n        try {\r\n            const menuRef = collection(db, \"menus\");\r\n            const q = query(menuRef, where(\"menu\", \"==\", selectedMenu));\r\n            const querySnapshot = await getDocs(q);\r\n            \r\n            let restaurantList = [];\r\n            querySnapshot.forEach((doc) => {\r\n                restaurantList.push(doc.data().restaurant);\r\n            });\r\n\r\n            const restaurantRef = collection(db, \"restaurants\");\r\n            const restaurantQuery = query(restaurantRef, where(\"name\", \"in\", restaurantList));\r\n            const restaurantSnapshot = await getDocs(restaurantQuery);\r\n\r\n            let reviews = [];\r\n            restaurantSnapshot.forEach((doc) => {\r\n                const data = doc.data();\r\n                reviews.push({\r\n                    name: data.name,\r\n                    review: `[만족도] ${data.satisfaction} [분위기] ${data.atmosphere} [서비스] ${data.service} [맛] ${data.taste} [양] ${data.amount} [위생 상태] ${data.sanity}`\r\n                });\r\n            });\r\n\r\n            addMessage('어느 지역의 식당을 추천해드릴까요? (예: 고대사거리, 안암로터리 등)', false);\r\n            // 여기서 사용자의 지역 선택을 기다립니다.\r\n        } catch (error) {\r\n            console.error('Error fetching restaurants:', error);\r\n            addMessage('죄송합니다. 식당 정보를 가져오는 데 실패했습니다.', false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <header className=\"chat-header\">쿠잇나우</header>\r\n            <div className=\"chat-messages\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.isUser ? 'user' : 'bot'}`}>\r\n                        {!msg.isUser && <div className=\"circle bot\"></div>}\r\n                        <div className=\"message-bubble\">{msg.content}</div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"chat-input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"userInput\"\r\n                    placeholder=\"메시지를 입력해주세요.\"\r\n                    className=\"chat-input\"\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === 'Enter') handleSendMessage();\r\n                    }}\r\n                />\r\n                <button onClick={handleSendMessage} className=\"send-button\">\r\n                    ▶\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserInputScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}