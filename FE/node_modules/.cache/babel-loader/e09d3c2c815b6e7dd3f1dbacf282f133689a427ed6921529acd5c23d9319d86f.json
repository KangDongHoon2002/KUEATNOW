{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kdonghoon\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\midtermProject_combined\\\\FE\\\\src\\\\components\\\\UserInputScreen\\\\UserInputScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './UserInputScreen.css';\nimport config from '../../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fixedQuestions = [\"먹고 싶은 요리의 장르가 어떻게 되나요? 한식, 중식, 일식, 양식 등으로 답해주세요.\", \"어떤 재료로 만든 요리를 먹고 싶으신가요? 생선요리, 고기요리, 채소요리 등으로 답해주세요.\", \"어떤 맛의 요리를 먹고 싶으신가요? 단맛, 매운맛, 짠맛 등으로 답해주세요.\", \"어떤 식사를 하고 싶으신가요? 간단한 한 끼, 든든한 한끼 등으로 답해주세요.\", \"어떤 조리 방식을 원하시나요? 구이, 튀김, 볶음 등으로 답해주세요.\", \"추가적으로 의견이 있다면 제시해주세요.\"];\nfunction UserInputScreen() {\n  _s();\n  const location = useLocation();\n  const {\n    menuList: initialMenuList = [],\n    selectedStore = '',\n    budget = 0\n  } = location.state || {};\n  const [messages, setMessages] = useState([]);\n  const [menuList] = useState(initialMenuList);\n  const [recommendedMenus, setRecommendedMenus] = useState([]);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [stage, setStage] = useState('initial');\n  const [selectedMenu, setSelectedMenu] = useState('');\n  const [userLocations, setUserLocations] = useState([]);\n  const [debugInfo, setDebugInfo] = useState('');\n  useEffect(() => {\n    startMenuRecommendation();\n  }, [selectedStore, budget]);\n  const addMessage = (content, isUser) => {\n    setMessages(prev => [...prev, {\n      content,\n      isUser\n    }]);\n  };\n  const startMenuRecommendation = () => {\n    setMessages([]);\n    setQuestionIndex(0);\n    setStage('initial');\n    setSelectedMenu('');\n    setUserLocations([]);\n    const storeTypeKorean = selectedStore === 'restaurant' ? '밥집' : selectedStore === 'cafe' ? '카페' : '술집';\n    addMessage(`안녕하세요! ${storeTypeKorean}에서 예산 ${budget}원으로 메뉴를 추천드리겠습니다.`, false);\n    askNextQuestion();\n  };\n  const askNextQuestion = () => {\n    if (questionIndex < fixedQuestions.length) {\n      addMessage(fixedQuestions[questionIndex], false);\n      setQuestionIndex(prevIndex => prevIndex + 1);\n    } else {\n      getMenuRecommendations();\n    }\n  };\n  const getMenuRecommendations = async () => {\n    try {\n      const response = await fetch(`${config.apiUrl}/api/menu-selection`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          menu_list: menuList,\n          conversation: messages.map(msg => ({\n            role: msg.isUser ? 'user' : 'assistant',\n            content: msg.content\n          })),\n          store_type: selectedStore\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setRecommendedMenus(data.recommended_menus);\n        addMessage(`추천 메뉴: ${data.recommended_menus.join(', ')}`, false);\n        addMessage('위 메뉴 중에서 선택하고 싶은 메뉴를 입력해주세요. 없다면 \"다시 추천\"이라고 입력해주세요.', false);\n        setStage('menu_selection');\n      }\n    } catch (error) {\n      console.error('Error getting menu recommendations:', error);\n      addMessage('죄송합니다. 메뉴 추천 중 오류가 발생했습니다.', false);\n    }\n  };\n  const handleSendMessage = async () => {\n    const userInput = document.getElementById('userInput').value.trim();\n    if (userInput) {\n      addMessage(userInput, true);\n      document.getElementById('userInput').value = '';\n      const lowerInput = userInput.toLowerCase().replace(/\\s/g, '');\n      if (lowerInput === '다시추천' || lowerInput === '다시추천') {\n        startMenuRecommendation();\n        return;\n      }\n      switch (stage) {\n        case 'initial':\n          if (questionIndex < fixedQuestions.length) {\n            askNextQuestion();\n          } else {\n            getMenuRecommendations();\n          }\n          break;\n        case 'menu_selection':\n          setSelectedMenu(userInput);\n          addMessage(`${userInput} 메뉴를 선택하셨습니다.`, false);\n          addMessage('법대후문, 고대정문앞, 고대사거리, 정대후문, 참살이길, 안암로터리, 제기동, 이공계, 교내 중 원하시는 지역들을 입력해주세요. 여러 지역을 입력하실 경우 쉼표로 구분해주세요.', false);\n          setStage('location_selection');\n          break;\n        case 'location_selection':\n          const locations = userInput.split(',').map(loc => loc.trim());\n          setUserLocations(locations);\n          addMessage(`선택하신 지역은 \"${locations.join(', ')}\"입니다.`, false);\n          addMessage('좋아요! 해당 지역들을 바탕으로 식당을 추천해줄게요. 만족도, 분위기, 서비스, 맛, 양, 위생과 관련해서 의견을 제시해주세요.', false);\n          setStage('preferences');\n          break;\n        case 'preferences':\n          await recommendRestaurants(userInput);\n          break;\n        case 'completed':\n          if (lowerInput === '다시시작') {\n            startMenuRecommendation();\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  };\n  const recommendRestaurants = async preferences => {\n    try {\n      console.log('Sending request with:', {\n        selected_menu: selectedMenu,\n        store_type: selectedStore,\n        max_price: budget,\n        locations: userLocations,\n        user_preferences: preferences\n      });\n      const response = await fetch(`${config.apiUrl}/api/recommend-restaurants`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          selected_menu: selectedMenu,\n          store_type: selectedStore,\n          max_price: budget,\n          locations: userLocations,\n          user_preferences: preferences\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        // HTML 태그를 안전하게 렌더링하기 위해 dangerouslySetInnerHTML 사용\n        addMessage(/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: data.recommended_restaurants\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 28\n        }, this), false);\n        setStage('completed');\n        addMessage('다른 메뉴나 지역을 추천받고 싶으시면 \"다시 시작\"이라고 입력해주세요.', false);\n      } else {\n        addMessage(data.error || '식당 추천 중 오류가 발생했습니다.', false);\n        if (data.error.includes('조건에 맞는 레스토랑을 찾을 수 없습니다')) {\n          addMessage('다른 메뉴나 위치를 선택해보시겠어요? \"다시 시작\"이라고 입력하시면 처음부터 다시 시작할 수 있습니다.', false);\n          setStage('completed');\n        }\n        if (data.traceback) {\n          setDebugInfo(`오류 내용:\\n${data.error}\\n\\n스택 트레이스:\\n${data.traceback}`);\n          addMessage('오류가 발생했습니다. 개발자에게 문의하실 때 아래의 디버그 정보를 함께 보내주세요.', false);\n        }\n      }\n    } catch (error) {\n      console.error('Error recommending restaurants:', error.message, error.stack);\n      addMessage('죄송합니다. 식당 추천 중 오류가 발생했습니다. 다시 시도해 주세요.', false);\n      setDebugInfo(`클라이언트 오류:\\n${error.message}\\n\\n${error.stack}`);\n      setStage('completed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: \"\\uCFE0\\uC787\\uB098\\uC6B0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.isUser ? 'user' : 'bot'}`,\n        children: [!msg.isUser && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-bubble\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this)), debugInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uB514\\uBC84\\uADF8 \\uC815\\uBCF4 (\\uAC1C\\uBC1C\\uC790\\uC6A9)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: debugInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            navigator.clipboard.writeText(debugInfo);\n          },\n          children: \"\\uB514\\uBC84\\uADF8 \\uC815\\uBCF4 \\uBCF5\\uC0AC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"userInput\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n        className: \"chat-input\",\n        onKeyPress: e => {\n          if (e.key === 'Enter') handleSendMessage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        children: \"\\u25B6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n}\n_s(UserInputScreen, \"4zGO4f/8utqI1MURYQHq90OT0kE=\", false, function () {\n  return [useLocation];\n});\n_c = UserInputScreen;\nexport default UserInputScreen;\nvar _c;\n$RefreshReg$(_c, \"UserInputScreen\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","config","jsxDEV","_jsxDEV","fixedQuestions","UserInputScreen","_s","location","menuList","initialMenuList","selectedStore","budget","state","messages","setMessages","recommendedMenus","setRecommendedMenus","questionIndex","setQuestionIndex","stage","setStage","selectedMenu","setSelectedMenu","userLocations","setUserLocations","debugInfo","setDebugInfo","startMenuRecommendation","addMessage","content","isUser","prev","storeTypeKorean","askNextQuestion","length","prevIndex","getMenuRecommendations","response","fetch","apiUrl","method","headers","body","JSON","stringify","menu_list","conversation","map","msg","role","store_type","data","json","success","recommended_menus","join","error","console","handleSendMessage","userInput","document","getElementById","value","trim","lowerInput","toLowerCase","replace","locations","split","loc","recommendRestaurants","preferences","log","selected_menu","max_price","user_preferences","dangerouslySetInnerHTML","__html","recommended_restaurants","fileName","_jsxFileName","lineNumber","columnNumber","includes","traceback","message","stack","className","children","index","onClick","navigator","clipboard","writeText","type","id","placeholder","onKeyPress","e","key","_c","$RefreshReg$"],"sources":["C:/Users/Kdonghoon/OneDrive/바탕 화면/midtermProject_combined/FE/src/components/UserInputScreen/UserInputScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './UserInputScreen.css';\r\nimport config from '../../config';\r\n\r\nconst fixedQuestions = [\r\n    \"먹고 싶은 요리의 장르가 어떻게 되나요? 한식, 중식, 일식, 양식 등으로 답해주세요.\",\r\n    \"어떤 재료로 만든 요리를 먹고 싶으신가요? 생선요리, 고기요리, 채소요리 등으로 답해주세요.\",\r\n    \"어떤 맛의 요리를 먹고 싶으신가요? 단맛, 매운맛, 짠맛 등으로 답해주세요.\",\r\n    \"어떤 식사를 하고 싶으신가요? 간단한 한 끼, 든든한 한끼 등으로 답해주세요.\",\r\n    \"어떤 조리 방식을 원하시나요? 구이, 튀김, 볶음 등으로 답해주세요.\",\r\n    \"추가적으로 의견이 있다면 제시해주세요.\"\r\n];\r\n\r\nfunction UserInputScreen() {\r\n    const location = useLocation();\r\n    const { menuList: initialMenuList = [], selectedStore = '', budget = 0 } = location.state || {};\r\n    const [messages, setMessages] = useState([]);\r\n    const [menuList] = useState(initialMenuList);\r\n    const [recommendedMenus, setRecommendedMenus] = useState([]);\r\n    const [questionIndex, setQuestionIndex] = useState(0);\r\n    const [stage, setStage] = useState('initial');\r\n    const [selectedMenu, setSelectedMenu] = useState('');\r\n    const [userLocations, setUserLocations] = useState([]);\r\n    const [debugInfo, setDebugInfo] = useState('');\r\n\r\n    useEffect(() => {\r\n        startMenuRecommendation();\r\n    }, [selectedStore, budget]);\r\n\r\n    const addMessage = (content, isUser) => {\r\n        setMessages(prev => [...prev, { content, isUser }]);\r\n    };\r\n\r\n    const startMenuRecommendation = () => {\r\n        setMessages([]);\r\n        setQuestionIndex(0);\r\n        setStage('initial');\r\n        setSelectedMenu('');\r\n        setUserLocations([]);\r\n        const storeTypeKorean = selectedStore === 'restaurant' ? '밥집' : selectedStore === 'cafe' ? '카페' : '술집';\r\n        addMessage(`안녕하세요! ${storeTypeKorean}에서 예산 ${budget}원으로 메뉴를 추천드리겠습니다.`, false);\r\n        askNextQuestion();\r\n    };\r\n\r\n    const askNextQuestion = () => {\r\n        if (questionIndex < fixedQuestions.length) {\r\n            addMessage(fixedQuestions[questionIndex], false);\r\n            setQuestionIndex(prevIndex => prevIndex + 1);\r\n        } else {\r\n            getMenuRecommendations();\r\n        }\r\n    };\r\n\r\n    const getMenuRecommendations = async () => {\r\n        try {\r\n            const response = await fetch(`${config.apiUrl}/api/menu-selection`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    menu_list: menuList,\r\n                    conversation: messages.map(msg => ({\r\n                        role: msg.isUser ? 'user' : 'assistant',\r\n                        content: msg.content\r\n                    })),\r\n                    store_type: selectedStore\r\n                }),\r\n            });\r\n            const data = await response.json();\r\n    \r\n            if (data.success) {\r\n                setRecommendedMenus(data.recommended_menus);\r\n                addMessage(`추천 메뉴: ${data.recommended_menus.join(', ')}`, false);\r\n                addMessage('위 메뉴 중에서 선택하고 싶은 메뉴를 입력해주세요. 없다면 \"다시 추천\"이라고 입력해주세요.', false);\r\n                setStage('menu_selection');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error getting menu recommendations:', error);\r\n            addMessage('죄송합니다. 메뉴 추천 중 오류가 발생했습니다.', false);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        const userInput = document.getElementById('userInput').value.trim();\r\n        if (userInput) {\r\n            addMessage(userInput, true);\r\n            document.getElementById('userInput').value = '';\r\n\r\n            const lowerInput = userInput.toLowerCase().replace(/\\s/g, '');\r\n            if (lowerInput === '다시추천' || lowerInput === '다시추천') {\r\n                startMenuRecommendation();\r\n                return;\r\n            }\r\n\r\n            switch (stage) {\r\n                case 'initial':\r\n                    if (questionIndex < fixedQuestions.length) {\r\n                        askNextQuestion();\r\n                    } else {\r\n                        getMenuRecommendations();\r\n                    }\r\n                    break;\r\n                case 'menu_selection':\r\n                    setSelectedMenu(userInput);\r\n                    addMessage(`${userInput} 메뉴를 선택하셨습니다.`, false);\r\n                    addMessage('법대후문, 고대정문앞, 고대사거리, 정대후문, 참살이길, 안암로터리, 제기동, 이공계, 교내 중 원하시는 지역들을 입력해주세요. 여러 지역을 입력하실 경우 쉼표로 구분해주세요.', false);\r\n                    setStage('location_selection');\r\n                    break;\r\n                case 'location_selection':\r\n                    const locations = userInput.split(',').map(loc => loc.trim());\r\n                    setUserLocations(locations);\r\n                    addMessage(`선택하신 지역은 \"${locations.join(', ')}\"입니다.`, false);\r\n                    addMessage('좋아요! 해당 지역들을 바탕으로 식당을 추천해줄게요. 만족도, 분위기, 서비스, 맛, 양, 위생과 관련해서 의견을 제시해주세요.', false);\r\n                    setStage('preferences');\r\n                    break;\r\n                case 'preferences':\r\n                    await recommendRestaurants(userInput);\r\n                    break;\r\n                case 'completed':\r\n                    if (lowerInput === '다시시작') {\r\n                        startMenuRecommendation();\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n\r\n    const recommendRestaurants = async (preferences) => {\r\n        try {\r\n            console.log('Sending request with:', {\r\n                selected_menu: selectedMenu,\r\n                store_type: selectedStore,\r\n                max_price: budget,\r\n                locations: userLocations,\r\n                user_preferences: preferences\r\n            });\r\n    \r\n            const response = await fetch(`${config.apiUrl}/api/recommend-restaurants`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    selected_menu: selectedMenu,\r\n                    store_type: selectedStore,\r\n                    max_price: budget,\r\n                    locations: userLocations,\r\n                    user_preferences: preferences\r\n                }),\r\n            });\r\n            const data = await response.json();\r\n    \r\n            if (data.success) {\r\n                // HTML 태그를 안전하게 렌더링하기 위해 dangerouslySetInnerHTML 사용\r\n                addMessage(<div dangerouslySetInnerHTML={{ __html: data.recommended_restaurants }} />, false);\r\n                setStage('completed');\r\n                addMessage('다른 메뉴나 지역을 추천받고 싶으시면 \"다시 시작\"이라고 입력해주세요.', false);\r\n            } else {\r\n                addMessage(data.error || '식당 추천 중 오류가 발생했습니다.', false);\r\n                if (data.error.includes('조건에 맞는 레스토랑을 찾을 수 없습니다')) {\r\n                    addMessage('다른 메뉴나 위치를 선택해보시겠어요? \"다시 시작\"이라고 입력하시면 처음부터 다시 시작할 수 있습니다.', false);\r\n                    setStage('completed');\r\n                }\r\n                if (data.traceback) {\r\n                    setDebugInfo(`오류 내용:\\n${data.error}\\n\\n스택 트레이스:\\n${data.traceback}`);\r\n                    addMessage('오류가 발생했습니다. 개발자에게 문의하실 때 아래의 디버그 정보를 함께 보내주세요.', false);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error recommending restaurants:', error.message, error.stack);\r\n            addMessage('죄송합니다. 식당 추천 중 오류가 발생했습니다. 다시 시도해 주세요.', false);\r\n            setDebugInfo(`클라이언트 오류:\\n${error.message}\\n\\n${error.stack}`);\r\n            setStage('completed');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <header className=\"chat-header\">쿠잇나우</header>\r\n            <div className=\"chat-messages\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.isUser ? 'user' : 'bot'}`}>\r\n                        {!msg.isUser && <div className=\"circle bot\"></div>}\r\n                        <div className=\"message-bubble\">{msg.content}</div>\r\n                    </div>\r\n                ))}\r\n                {debugInfo && (\r\n                    <div className=\"debug-info\">\r\n                        <h4>디버그 정보 (개발자용)</h4>\r\n                        <pre>{debugInfo}</pre>\r\n                        <button onClick={() => {navigator.clipboard.writeText(debugInfo)}}>\r\n                            디버그 정보 복사\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"chat-input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"userInput\"\r\n                    placeholder=\"메시지를 입력해주세요.\"\r\n                    className=\"chat-input\"\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === 'Enter') handleSendMessage();\r\n                    }}\r\n                />\r\n                <button onClick={handleSendMessage} className=\"send-button\">\r\n                    ▶\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserInputScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}