{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kdonghoon\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\midtermProject_combined\\\\FE\\\\src\\\\components\\\\UserLimitScreen2\\\\UserLimitScreen2.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport './UserLimitScreen2.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserInputScreen() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [menuList, setMenuList] = useState([]);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [recommendedMenus, setRecommendedMenus] = useState([]);\n  const location = useLocation();\n  useEffect(() => {\n    const {\n      menuList,\n      selectedStore,\n      budget\n    } = location.state;\n    setMenuList(menuList);\n    setMessages([{\n      sender: 'character',\n      text: `안녕하세요! 쿠잇나우입니다. ${selectedStore}에서 예산 ${budget}원으로 먹고 싶은 음식을 찾아보겠습니다.`\n    }]);\n    askQuestion(menuList, []);\n  }, [location]);\n  const askQuestion = async (currentMenuList, prevResponses) => {\n    try {\n      const response = await axios.post('/api/menu-selection/question', {\n        menu_list: currentMenuList,\n        menu_res_list: prevResponses\n      });\n      setMessages(prev => [...prev, {\n        sender: 'character',\n        text: response.data.menu_ques\n      }]);\n    } catch (error) {\n      console.error('Error asking question:', error);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (input.trim() !== '') {\n      setMessages(prev => [...prev, {\n        sender: 'user',\n        text: input\n      }]);\n      setQuestionCount(prev => prev + 1);\n      if (questionCount < 5) {\n        try {\n          const response = await axios.post('/api/menu-selection/recommend', {\n            menu_list: menuList,\n            menu_ques_list: messages.filter(msg => msg.sender === 'character').map(msg => msg.text),\n            menu_res_list: [...messages.filter(msg => msg.sender === 'user').map(msg => msg.text), input]\n          });\n          const newRecommendedMenus = response.data.recommended_menu.split(',').map(m => m.trim());\n          setRecommendedMenus(newRecommendedMenus);\n          setMessages(prev => [...prev, {\n            sender: 'character',\n            text: `추천 메뉴: ${newRecommendedMenus.join(', ')}`\n          }, {\n            sender: 'character',\n            text: '이 중에서 마음에 드는 메뉴가 있나요? 있다면 선택해주세요. 없다면 \"없음\"이라고 말씀해주세요.'\n          }]);\n        } catch (error) {\n          console.error('Error recommending menu:', error);\n        }\n      } else {\n        setMessages(prev => [...prev, {\n          sender: 'character',\n          text: '죄송합니다. 더 이상 질문할 수 없습니다. 추천된 메뉴 중에서 선택해주세요.'\n        }]);\n      }\n      setInput('');\n    }\n  };\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(UserInputScreen, \"UmI0JXv91Dk/LEorjs40NZkqtHk=\", false, function () {\n  return [useLocation];\n});\n_c = UserInputScreen;\nexport default UserInputScreen;\nvar _c;\n$RefreshReg$(_c, \"UserInputScreen\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","jsxDEV","_jsxDEV","UserInputScreen","_s","messages","setMessages","input","setInput","menuList","setMenuList","questionCount","setQuestionCount","recommendedMenus","setRecommendedMenus","location","selectedStore","budget","state","sender","text","askQuestion","currentMenuList","prevResponses","response","post","menu_list","menu_res_list","prev","data","menu_ques","error","console","handleSendMessage","trim","menu_ques_list","filter","msg","map","newRecommendedMenus","recommended_menu","split","m","join","handleInputChange","e","target","value","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Kdonghoon/OneDrive/바탕 화면/midtermProject_combined/FE/src/components/UserLimitScreen2/UserLimitScreen2.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './UserLimitScreen2.css';\r\n\r\nfunction UserInputScreen() {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [menuList, setMenuList] = useState([]);\r\n    const [questionCount, setQuestionCount] = useState(0);\r\n    const [recommendedMenus, setRecommendedMenus] = useState([]);\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        const { menuList, selectedStore, budget } = location.state;\r\n        setMenuList(menuList);\r\n        setMessages([\r\n            { sender: 'character', text: `안녕하세요! 쿠잇나우입니다. ${selectedStore}에서 예산 ${budget}원으로 먹고 싶은 음식을 찾아보겠습니다.` }\r\n        ]);\r\n        askQuestion(menuList, []);\r\n    }, [location]);\r\n\r\n    const askQuestion = async (currentMenuList, prevResponses) => {\r\n        try {\r\n            const response = await axios.post('/api/menu-selection/question', {\r\n                menu_list: currentMenuList,\r\n                menu_res_list: prevResponses\r\n            });\r\n            setMessages(prev => [...prev, { sender: 'character', text: response.data.menu_ques }]);\r\n        } catch (error) {\r\n            console.error('Error asking question:', error);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        if (input.trim() !== '') {\r\n            setMessages(prev => [...prev, { sender: 'user', text: input }]);\r\n            setQuestionCount(prev => prev + 1);\r\n\r\n            if (questionCount < 5) {\r\n                try {\r\n                    const response = await axios.post('/api/menu-selection/recommend', {\r\n                        menu_list: menuList,\r\n                        menu_ques_list: messages.filter(msg => msg.sender === 'character').map(msg => msg.text),\r\n                        menu_res_list: [...messages.filter(msg => msg.sender === 'user').map(msg => msg.text), input]\r\n                    });\r\n                    const newRecommendedMenus = response.data.recommended_menu.split(',').map(m => m.trim());\r\n                    setRecommendedMenus(newRecommendedMenus);\r\n                    setMessages(prev => [\r\n                        ...prev,\r\n                        { sender: 'character', text: `추천 메뉴: ${newRecommendedMenus.join(', ')}` },\r\n                        { sender: 'character', text: '이 중에서 마음에 드는 메뉴가 있나요? 있다면 선택해주세요. 없다면 \"없음\"이라고 말씀해주세요.' }\r\n                    ]);\r\n                } catch (error) {\r\n                    console.error('Error recommending menu:', error);\r\n                }\r\n            } else {\r\n                setMessages(prev => [...prev, { sender: 'character', text: '죄송합니다. 더 이상 질문할 수 없습니다. 추천된 메뉴 중에서 선택해주세요.' }]);\r\n            }\r\n            setInput('');\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            {/* 기존 JSX 코드 유지 */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserInputScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}