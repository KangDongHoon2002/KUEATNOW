{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kdonghoon\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\midtermProject_combined\\\\FE\\\\src\\\\components\\\\UserInputScreen\\\\UserInputScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './UserInputScreen.css';\nimport config from '../../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserInputScreen() {\n  _s();\n  const location = useLocation();\n  const {\n    menuList: initialMenuList = [],\n    selectedStore = '',\n    budget = 0\n  } = location.state || {};\n  const [messages, setMessages] = useState([]);\n  const [menuList] = useState(initialMenuList);\n  const [recommendedMenus, setRecommendedMenus] = useState([]);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [stage, setStage] = useState('initial');\n  const [selectedMenu, setSelectedMenu] = useState('');\n  const [userLocations, setUserLocations] = useState([]);\n  useEffect(() => {\n    const storeTypeKorean = selectedStore === 'restaurant' ? '밥집' : selectedStore === 'cafe' ? '카페' : '술집';\n    addMessage(`안녕하세요! ${storeTypeKorean}에서 예산 ${budget}원으로 메뉴를 추천드리겠습니다.`, false);\n    askQuestion();\n  }, [selectedStore, budget]);\n  const addMessage = (content, isUser) => {\n    setMessages(prev => [...prev, {\n      content,\n      isUser\n    }]);\n  };\n  const askQuestion = async (userInput = '') => {\n    try {\n      const response = await fetch(`${config.apiUrl}/api/menu-selection`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          menu_list: menuList,\n          user_response: userInput,\n          question_count: questionCount,\n          previous_responses: messages.filter(msg => msg.isUser).map(msg => msg.content),\n          store_type: selectedStore\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        if (data.next_question) {\n          addMessage(data.next_question, false);\n          setQuestionCount(prev => prev + 1);\n        } else if (data.recommended_menus) {\n          setRecommendedMenus(data.recommended_menus);\n          addMessage(`추천 메뉴: ${data.recommended_menus.join(', ')}`, false);\n          addMessage('위 메뉴 중에서 선택하고 싶은 메뉴를 입력해주세요. 없다면 \"다시 추천\"이라고 입력해주세요.', false);\n          setStage('menu_selection');\n        }\n      }\n    } catch (error) {\n      console.error('Error asking question:', error);\n      addMessage('죄송합니다. 오류가 발생했습니다.', false);\n    }\n  };\n  const handleSendMessage = async () => {\n    const userInput = document.getElementById('userInput').value.trim();\n    if (userInput) {\n      addMessage(userInput, true);\n      document.getElementById('userInput').value = '';\n      switch (stage) {\n        case 'initial':\n          await askQuestion(userInput);\n          break;\n        case 'menu_selection':\n          if (userInput.toLowerCase() === '다시 추천') {\n            await askQuestion('다른 메뉴를 추천해주세요.');\n          } else {\n            setSelectedMenu(userInput);\n            addMessage(`${userInput} 메뉴를 선택하셨습니다.`, false);\n            addMessage('법대후문, 고대정문앞, 고대사거리, 정대후문, 참살이길, 안암로터리, 제기동, 이공계, 교내 중 원하시는 지역들을 입력해주세요. 여러 지역을 입력하실 경우 쉼표로 구분해주세요.', false);\n            setStage('location_selection');\n          }\n          break;\n        case 'location_selection':\n          const locations = userInput.split(',').map(loc => loc.trim());\n          setUserLocations(locations);\n          addMessage(`선택하신 지역은 \"${locations.join(', ')}\"입니다.`, false);\n          addMessage('좋아요! 해당 지역들을 바탕으로 식당을 추천해줄게요. 만족도, 분위기, 서비스, 맛, 양, 위생과 관련해서 의견을 제시해주세요.', false);\n          setStage('preferences');\n          break;\n        case 'preferences':\n          await recommendRestaurants(userInput);\n          break;\n        case 'completed':\n          if (userInput.toLowerCase() === '다시 시작') {\n            setStage('initial');\n            setQuestionCount(0);\n            setSelectedMenu('');\n            setUserLocations([]);\n            addMessage('새로운 추천을 시작합니다.', false);\n            askQuestion();\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  };\n  const recommendRestaurants = async preferences => {\n    try {\n      console.log('Sending request with:', {\n        selected_menu: selectedMenu,\n        store_type: selectedStore,\n        max_price: budget,\n        locations: userLocations,\n        user_preferences: preferences\n      });\n      const response = await fetch(`${config.apiUrl}/api/recommend-restaurants`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          selected_menu: selectedMenu,\n          store_type: selectedStore,\n          max_price: budget,\n          locations: userLocations,\n          user_preferences: preferences\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        addMessage(data.recommended_restaurants, false);\n        setStage('completed');\n        addMessage('다른 메뉴나 지역을 추천받고 싶으시면 \"다시 시작\"이라고 입력해주세요.', false);\n      } else {\n        addMessage(data.error || '식당 추천 중 오류가 발생했습니다.', false);\n        if (data.error === '조건에 맞는 레스토랑을 찾을 수 없습니다.') {\n          addMessage('다른 메뉴나 위치를 선택해보시겠어요?', false);\n          setStage('menu_selection');\n        }\n      }\n    } catch (error) {\n      console.error('Error recommending restaurants:', error.message, error.stack);\n      addMessage('죄송합니다. 식당 추천 중 오류가 발생했습니다.', false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: \"\\uCFE0\\uC787\\uB098\\uC6B0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.isUser ? 'user' : 'bot'}`,\n        children: [!msg.isUser && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-bubble\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"userInput\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n        className: \"chat-input\",\n        onKeyPress: e => {\n          if (e.key === 'Enter') handleSendMessage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        children: \"\\u25B6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n}\n_s(UserInputScreen, \"scPkohbsTGu1W2pznNo6MeGyaZY=\", false, function () {\n  return [useLocation];\n});\n_c = UserInputScreen;\nexport default UserInputScreen;\nvar _c;\n$RefreshReg$(_c, \"UserInputScreen\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","config","jsxDEV","_jsxDEV","UserInputScreen","_s","location","menuList","initialMenuList","selectedStore","budget","state","messages","setMessages","recommendedMenus","setRecommendedMenus","questionCount","setQuestionCount","stage","setStage","selectedMenu","setSelectedMenu","userLocations","setUserLocations","storeTypeKorean","addMessage","askQuestion","content","isUser","prev","userInput","response","fetch","apiUrl","method","headers","body","JSON","stringify","menu_list","user_response","question_count","previous_responses","filter","msg","map","store_type","data","json","success","next_question","recommended_menus","join","error","console","handleSendMessage","document","getElementById","value","trim","toLowerCase","locations","split","loc","recommendRestaurants","preferences","log","selected_menu","max_price","user_preferences","recommended_restaurants","message","stack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","type","id","placeholder","onKeyPress","e","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Kdonghoon/OneDrive/바탕 화면/midtermProject_combined/FE/src/components/UserInputScreen/UserInputScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './UserInputScreen.css';\r\nimport config from '../../config';\r\n\r\nfunction UserInputScreen() {\r\n    const location = useLocation();\r\n    const { menuList: initialMenuList = [], selectedStore = '', budget = 0 } = location.state || {};\r\n    const [messages, setMessages] = useState([]);\r\n    const [menuList] = useState(initialMenuList);\r\n    const [recommendedMenus, setRecommendedMenus] = useState([]);\r\n    const [questionCount, setQuestionCount] = useState(0);\r\n    const [stage, setStage] = useState('initial');\r\n    const [selectedMenu, setSelectedMenu] = useState('');\r\n    const [userLocations, setUserLocations] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const storeTypeKorean = selectedStore === 'restaurant' ? '밥집' : selectedStore === 'cafe' ? '카페' : '술집';\r\n        addMessage(`안녕하세요! ${storeTypeKorean}에서 예산 ${budget}원으로 메뉴를 추천드리겠습니다.`, false);\r\n        askQuestion();\r\n    }, [selectedStore, budget]);\r\n\r\n    const addMessage = (content, isUser) => {\r\n        setMessages(prev => [...prev, { content, isUser }]);\r\n    };\r\n\r\n    const askQuestion = async (userInput = '') => {\r\n        try {\r\n            const response = await fetch(`${config.apiUrl}/api/menu-selection`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    menu_list: menuList,\r\n                    user_response: userInput,\r\n                    question_count: questionCount,\r\n                    previous_responses: messages.filter(msg => msg.isUser).map(msg => msg.content),\r\n                    store_type: selectedStore\r\n                }),\r\n            });\r\n            const data = await response.json();\r\n    \r\n            if (data.success) {\r\n                if (data.next_question) {\r\n                    addMessage(data.next_question, false);\r\n                    setQuestionCount(prev => prev + 1);\r\n                } else if (data.recommended_menus) {\r\n                    setRecommendedMenus(data.recommended_menus);\r\n                    addMessage(`추천 메뉴: ${data.recommended_menus.join(', ')}`, false);\r\n                    addMessage('위 메뉴 중에서 선택하고 싶은 메뉴를 입력해주세요. 없다면 \"다시 추천\"이라고 입력해주세요.', false);\r\n                    setStage('menu_selection');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error asking question:', error);\r\n            addMessage('죄송합니다. 오류가 발생했습니다.', false);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        const userInput = document.getElementById('userInput').value.trim();\r\n        if (userInput) {\r\n            addMessage(userInput, true);\r\n            document.getElementById('userInput').value = '';\r\n\r\n            switch (stage) {\r\n                case 'initial':\r\n                    await askQuestion(userInput);\r\n                    break;\r\n                case 'menu_selection':\r\n                    if (userInput.toLowerCase() === '다시 추천') {\r\n                         await askQuestion('다른 메뉴를 추천해주세요.');\r\n                      } else {\r\n                         setSelectedMenu(userInput);\r\n                         addMessage(`${userInput} 메뉴를 선택하셨습니다.`, false);\r\n                         addMessage('법대후문, 고대정문앞, 고대사거리, 정대후문, 참살이길, 안암로터리, 제기동, 이공계, 교내 중 원하시는 지역들을 입력해주세요. 여러 지역을 입력하실 경우 쉼표로 구분해주세요.', false);\r\n                         setStage('location_selection');\r\n                     }\r\n                     break;\r\n                case 'location_selection':\r\n                    const locations = userInput.split(',').map(loc => loc.trim());\r\n                    setUserLocations(locations);\r\n                    addMessage(`선택하신 지역은 \"${locations.join(', ')}\"입니다.`, false);\r\n                    addMessage('좋아요! 해당 지역들을 바탕으로 식당을 추천해줄게요. 만족도, 분위기, 서비스, 맛, 양, 위생과 관련해서 의견을 제시해주세요.', false);\r\n                    setStage('preferences');\r\n                    break;\r\n                case 'preferences':\r\n                    await recommendRestaurants(userInput);\r\n                    break;\r\n                case 'completed':\r\n                    if (userInput.toLowerCase() === '다시 시작') {\r\n                        setStage('initial');\r\n                        setQuestionCount(0);\r\n                        setSelectedMenu('');\r\n                        setUserLocations([]);\r\n                        addMessage('새로운 추천을 시작합니다.', false);\r\n                        askQuestion();\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n\r\n    const recommendRestaurants = async (preferences) => {\r\n        try {\r\n            console.log('Sending request with:', {\r\n                selected_menu: selectedMenu,\r\n                store_type: selectedStore,\r\n                max_price: budget,\r\n                locations: userLocations,\r\n                user_preferences: preferences\r\n            });\r\n    \r\n            const response = await fetch(`${config.apiUrl}/api/recommend-restaurants`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    selected_menu: selectedMenu,\r\n                    store_type: selectedStore,\r\n                    max_price: budget,\r\n                    locations: userLocations,\r\n                    user_preferences: preferences\r\n                }),\r\n            });\r\n            const data = await response.json();\r\n    \r\n            if (data.success) {\r\n                addMessage(data.recommended_restaurants, false);\r\n                setStage('completed');\r\n                addMessage('다른 메뉴나 지역을 추천받고 싶으시면 \"다시 시작\"이라고 입력해주세요.', false);\r\n            } else {\r\n                addMessage(data.error || '식당 추천 중 오류가 발생했습니다.', false);\r\n                if (data.error === '조건에 맞는 레스토랑을 찾을 수 없습니다.') {\r\n                    addMessage('다른 메뉴나 위치를 선택해보시겠어요?', false);\r\n                    setStage('menu_selection');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error recommending restaurants:', error.message, error.stack);\r\n            addMessage('죄송합니다. 식당 추천 중 오류가 발생했습니다.', false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <header className=\"chat-header\">쿠잇나우</header>\r\n            <div className=\"chat-messages\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.isUser ? 'user' : 'bot'}`}>\r\n                        {!msg.isUser && <div className=\"circle bot\"></div>}\r\n                        <div className=\"message-bubble\">{msg.content}</div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"chat-input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"userInput\"\r\n                    placeholder=\"메시지를 입력해주세요.\"\r\n                    className=\"chat-input\"\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === 'Enter') handleSendMessage();\r\n                    }}\r\n                />\r\n                <button onClick={handleSendMessage} className=\"send-button\">\r\n                    ▶\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserInputScreen;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,uBAAuB;AAC9B,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEO,QAAQ,EAAEC,eAAe,GAAG,EAAE;IAAEC,aAAa,GAAG,EAAE;IAAEC,MAAM,GAAG;EAAE,CAAC,GAAGJ,QAAQ,CAACK,KAAK,IAAI,CAAC,CAAC;EAC/F,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,QAAQ,CAAC,GAAGT,QAAQ,CAACU,eAAe,CAAC;EAC5C,MAAM,CAACM,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,SAAS,CAAC;EAC7C,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACwB,aAAa,EAAEC,gBAAgB,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACZ,MAAMyB,eAAe,GAAGf,aAAa,KAAK,YAAY,GAAG,IAAI,GAAGA,aAAa,KAAK,MAAM,GAAG,IAAI,GAAG,IAAI;IACtGgB,UAAU,CAAC,UAAUD,eAAe,SAASd,MAAM,mBAAmB,EAAE,KAAK,CAAC;IAC9EgB,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,CAACjB,aAAa,EAAEC,MAAM,CAAC,CAAC;EAE3B,MAAMe,UAAU,GAAGA,CAACE,OAAO,EAAEC,MAAM,KAAK;IACpCf,WAAW,CAACgB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAEF,OAAO;MAAEC;IAAO,CAAC,CAAC,CAAC;EACvD,CAAC;EAED,MAAMF,WAAW,GAAG,MAAAA,CAAOI,SAAS,GAAG,EAAE,KAAK;IAC1C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG/B,MAAM,CAACgC,MAAM,qBAAqB,EAAE;QAChEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,SAAS,EAAEhC,QAAQ;UACnBiC,aAAa,EAAEV,SAAS;UACxBW,cAAc,EAAEzB,aAAa;UAC7B0B,kBAAkB,EAAE9B,QAAQ,CAAC+B,MAAM,CAACC,GAAG,IAAIA,GAAG,CAAChB,MAAM,CAAC,CAACiB,GAAG,CAACD,GAAG,IAAIA,GAAG,CAACjB,OAAO,CAAC;UAC9EmB,UAAU,EAAErC;QAChB,CAAC;MACL,CAAC,CAAC;MACF,MAAMsC,IAAI,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QACd,IAAIF,IAAI,CAACG,aAAa,EAAE;UACpBzB,UAAU,CAACsB,IAAI,CAACG,aAAa,EAAE,KAAK,CAAC;UACrCjC,gBAAgB,CAACY,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;QACtC,CAAC,MAAM,IAAIkB,IAAI,CAACI,iBAAiB,EAAE;UAC/BpC,mBAAmB,CAACgC,IAAI,CAACI,iBAAiB,CAAC;UAC3C1B,UAAU,CAAC,UAAUsB,IAAI,CAACI,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC;UAChE3B,UAAU,CAAC,qDAAqD,EAAE,KAAK,CAAC;UACxEN,QAAQ,CAAC,gBAAgB,CAAC;QAC9B;MACJ;IACJ,CAAC,CAAC,OAAOkC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C5B,UAAU,CAAC,oBAAoB,EAAE,KAAK,CAAC;IAC3C;EACJ,CAAC;EAED,MAAM8B,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMzB,SAAS,GAAG0B,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC;IACnE,IAAI7B,SAAS,EAAE;MACXL,UAAU,CAACK,SAAS,EAAE,IAAI,CAAC;MAC3B0B,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,KAAK,GAAG,EAAE;MAE/C,QAAQxC,KAAK;QACT,KAAK,SAAS;UACV,MAAMQ,WAAW,CAACI,SAAS,CAAC;UAC5B;QACJ,KAAK,gBAAgB;UACjB,IAAIA,SAAS,CAAC8B,WAAW,CAAC,CAAC,KAAK,OAAO,EAAE;YACpC,MAAMlC,WAAW,CAAC,gBAAgB,CAAC;UACtC,CAAC,MAAM;YACJL,eAAe,CAACS,SAAS,CAAC;YAC1BL,UAAU,CAAC,GAAGK,SAAS,eAAe,EAAE,KAAK,CAAC;YAC9CL,UAAU,CAAC,oGAAoG,EAAE,KAAK,CAAC;YACvHN,QAAQ,CAAC,oBAAoB,CAAC;UAClC;UACA;QACL,KAAK,oBAAoB;UACrB,MAAM0C,SAAS,GAAG/B,SAAS,CAACgC,KAAK,CAAC,GAAG,CAAC,CAACjB,GAAG,CAACkB,GAAG,IAAIA,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC;UAC7DpC,gBAAgB,CAACsC,SAAS,CAAC;UAC3BpC,UAAU,CAAC,aAAaoC,SAAS,CAACT,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;UAC3D3B,UAAU,CAAC,yEAAyE,EAAE,KAAK,CAAC;UAC5FN,QAAQ,CAAC,aAAa,CAAC;UACvB;QACJ,KAAK,aAAa;UACd,MAAM6C,oBAAoB,CAAClC,SAAS,CAAC;UACrC;QACJ,KAAK,WAAW;UACZ,IAAIA,SAAS,CAAC8B,WAAW,CAAC,CAAC,KAAK,OAAO,EAAE;YACrCzC,QAAQ,CAAC,SAAS,CAAC;YACnBF,gBAAgB,CAAC,CAAC,CAAC;YACnBI,eAAe,CAAC,EAAE,CAAC;YACnBE,gBAAgB,CAAC,EAAE,CAAC;YACpBE,UAAU,CAAC,gBAAgB,EAAE,KAAK,CAAC;YACnCC,WAAW,CAAC,CAAC;UACjB;UACA;QACJ;UACI;MACR;IACJ;EACJ,CAAC;EAED,MAAMsC,oBAAoB,GAAG,MAAOC,WAAW,IAAK;IAChD,IAAI;MACAX,OAAO,CAACY,GAAG,CAAC,uBAAuB,EAAE;QACjCC,aAAa,EAAE/C,YAAY;QAC3B0B,UAAU,EAAErC,aAAa;QACzB2D,SAAS,EAAE1D,MAAM;QACjBmD,SAAS,EAAEvC,aAAa;QACxB+C,gBAAgB,EAAEJ;MACtB,CAAC,CAAC;MAEF,MAAMlC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG/B,MAAM,CAACgC,MAAM,4BAA4B,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjB6B,aAAa,EAAE/C,YAAY;UAC3B0B,UAAU,EAAErC,aAAa;UACzB2D,SAAS,EAAE1D,MAAM;UACjBmD,SAAS,EAAEvC,aAAa;UACxB+C,gBAAgB,EAAEJ;QACtB,CAAC;MACL,CAAC,CAAC;MACF,MAAMlB,IAAI,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QACdxB,UAAU,CAACsB,IAAI,CAACuB,uBAAuB,EAAE,KAAK,CAAC;QAC/CnD,QAAQ,CAAC,WAAW,CAAC;QACrBM,UAAU,CAAC,yCAAyC,EAAE,KAAK,CAAC;MAChE,CAAC,MAAM;QACHA,UAAU,CAACsB,IAAI,CAACM,KAAK,IAAI,qBAAqB,EAAE,KAAK,CAAC;QACtD,IAAIN,IAAI,CAACM,KAAK,KAAK,yBAAyB,EAAE;UAC1C5B,UAAU,CAAC,sBAAsB,EAAE,KAAK,CAAC;UACzCN,QAAQ,CAAC,gBAAgB,CAAC;QAC9B;MACJ;IACJ,CAAC,CAAC,OAAOkC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACkB,OAAO,EAAElB,KAAK,CAACmB,KAAK,CAAC;MAC5E/C,UAAU,CAAC,4BAA4B,EAAE,KAAK,CAAC;IACnD;EACJ,CAAC;EAED,oBACItB,OAAA;IAAKsE,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3BvE,OAAA;MAAQsE,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC7C3E,OAAA;MAAKsE,SAAS,EAAC,eAAe;MAAAC,QAAA,EACzB9D,QAAQ,CAACiC,GAAG,CAAC,CAACD,GAAG,EAAEmC,KAAK,kBACrB5E,OAAA;QAAiBsE,SAAS,EAAE,WAAW7B,GAAG,CAAChB,MAAM,GAAG,MAAM,GAAG,KAAK,EAAG;QAAA8C,QAAA,GAChE,CAAC9B,GAAG,CAAChB,MAAM,iBAAIzB,OAAA;UAAKsE,SAAS,EAAC;QAAY;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAClD3E,OAAA;UAAKsE,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAAE9B,GAAG,CAACjB;QAAO;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GAF7CC,KAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACN3E,OAAA;MAAKsE,SAAS,EAAC,sBAAsB;MAAAC,QAAA,gBACjCvE,OAAA;QACI6E,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,WAAW;QACdC,WAAW,EAAC,gEAAc;QAC1BT,SAAS,EAAC,YAAY;QACtBU,UAAU,EAAGC,CAAC,IAAK;UACf,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAE9B,iBAAiB,CAAC,CAAC;QAC9C;MAAE;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACF3E,OAAA;QAAQmF,OAAO,EAAE/B,iBAAkB;QAACkB,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAE5D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACzE,EAAA,CA1KQD,eAAe;EAAA,QACHJ,WAAW;AAAA;AAAAuF,EAAA,GADvBnF,eAAe;AA4KxB,eAAeA,eAAe;AAAC,IAAAmF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}