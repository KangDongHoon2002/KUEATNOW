{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kdonghoon\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\midtermProject_combined\\\\FE\\\\src\\\\components\\\\UserInputScreen\\\\UserInputScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './UserInputScreen.css';\nimport config from '../../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fixedQuestions = [\"오늘 식사는 어땠으면 좋겠어? 간단한 한 끼, 든든한 한끼 등으로 답해줘!\", \"어떤 맛이 메뉴에서 도드라졌으면 좋겠어? (단맛, 매운맛, 짠맛 등)\", \"국물 요리가 좋을까, 아니면 볶음/구이 같은 메뉴가 좋을까?\", \"먹고 싶은 요리의 장르를 알려줘! 딱히 없다면 없다고 말해줘.(한식, 중식, 일식, 양식 등)\", \"오늘은 면 요리가 좋을까, 밥 요리가 좋을까? 아니면 그 외?\", \"또 추천에서 고려해야 할 사항이 있을까?\"];\nfunction UserInputScreen() {\n  _s();\n  const location = useLocation();\n  const {\n    menuList: initialMenuList = [],\n    selectedStore = '',\n    budget = 0\n  } = location.state || {};\n  const [messages, setMessages] = useState([]);\n  const [menuList, setMenuList] = useState(initialMenuList);\n  const [recommendedMenus, setRecommendedMenus] = useState([]);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [stage, setStage] = useState('initial');\n  const [selectedMenu, setSelectedMenu] = useState('');\n  const [userLocations, setUserLocations] = useState([]);\n  const [debugInfo, setDebugInfo] = useState('');\n  const [excludedMenus, setExcludedMenus] = useState([]);\n  const [allMenus, setAllMenus] = useState([]);\n  const [availableMenus, setAvailableMenus] = useState([]);\n  const [isClicked, setIsClicked] = useState(false);\n  const handleButtonClick = () => {\n    setIsClicked(true); // 버튼 클릭 시 클릭 상태 변경\n    handleSendMessage();\n  };\n  useEffect(() => {\n    fetchAllMenus();\n    startMenuRecommendation();\n  }, [selectedStore, budget]);\n  const fetchAllMenus = async () => {\n    try {\n      const response = await fetch(`${config.apiUrl}/api/all-menus`);\n      const data = await response.json();\n      if (data.success) {\n        setAllMenus(data.menus);\n        setAvailableMenus(data.menus);\n        console.log(\"가져온 전체 메뉴 목록:\", data.menus);\n      }\n    } catch (error) {\n      console.error('메뉴 목록을 가져오는 중 오류 발생:', error);\n    }\n  };\n  const addMessage = (content, isUser) => {\n    setMessages(prev => [...prev, {\n      content,\n      isUser\n    }]);\n  };\n  const startMenuRecommendation = () => {\n    setMessages([]);\n    setQuestionIndex(0);\n    setStage('initial');\n    setSelectedMenu('');\n    setUserLocations([]);\n    setExcludedMenus([]);\n    setAvailableMenus(allMenus);\n    const storeTypeKorean = selectedStore === 'restaurant' ? '밥집' : selectedStore === 'cafe' ? '카페' : '술집';\n    addMessage(`안녕하세요! ${storeTypeKorean}에서 예산 ${budget}원으로 메뉴를 추천드리겠습니다.`, false);\n    askNextQuestion();\n  };\n  const askNextQuestion = () => {\n    if (questionIndex < fixedQuestions.length) {\n      addMessage(fixedQuestions[questionIndex], false);\n      setQuestionIndex(prevIndex => prevIndex + 1);\n    } else {\n      getMenuRecommendations();\n    }\n  };\n  const getMenuRecommendations = async (isRecommendation = false) => {\n    try {\n      console.log(\"현재 사용 가능한 메뉴 목록:\", availableMenus);\n      console.log(\"제외된 메뉴 목록:\", excludedMenus);\n      if (availableMenus.length < 3) {\n        addMessage(\"죄송합니다. 더 이상 추천할 수 있는 메뉴가 없습니다. 처음부터 다시 시작하시겠습니까?\", false);\n        setStage('restart_prompt');\n        return;\n      }\n      const response = await fetch(`${config.apiUrl}/api/menu-selection`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          menu_list: availableMenus,\n          excluded_menus: excludedMenus,\n          conversation: messages.map(msg => ({\n            role: msg.isUser ? 'user' : 'assistant',\n            content: msg.content\n          })),\n          store_type: selectedStore\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setRecommendedMenus(data.recommended_menus);\n        console.log(\"추천된 메뉴:\", data.recommended_menus);\n        const messagePrefix = isRecommendation ? \"새로운 추천 메뉴: \" : \"추천 메뉴: \";\n        addMessage(`${messagePrefix}${data.recommended_menus.join(', ')}`, false);\n        addMessage('위 메뉴 중에서 선택하고 싶은 메뉴를 입력해주세요. 없다면 \"다시 추천\"이라고 입력해주세요.', false);\n        setStage('menu_selection');\n      }\n    } catch (error) {\n      console.error('메뉴 추천 중 오류 발생:', error);\n      addMessage('죄송합니다. 메뉴 추천 중 오류가 발생했습니다.', false);\n    }\n  };\n  const handleSendMessage = async () => {\n    const userInput = document.getElementById('userInput').value.trim();\n    if (userInput) {\n      addMessage(userInput, true);\n      document.getElementById('userInput').value = '';\n      const lowerInput = userInput.toLowerCase().replace(/\\s/g, '');\n      if (lowerInput === '다시추천' || lowerInput === '다시추천') {\n        const newExcludedMenus = [...excludedMenus, ...recommendedMenus];\n        setExcludedMenus(newExcludedMenus);\n        const newAvailableMenus = availableMenus.filter(menu => !newExcludedMenus.includes(menu));\n        setAvailableMenus(newAvailableMenus);\n        console.log(\"다시 추천 요청. 현재 제외된 메뉴:\", newExcludedMenus);\n        console.log(\"남은 사용 가능한 메뉴:\", newAvailableMenus);\n        await getMenuRecommendations(true);\n        return;\n      }\n      switch (stage) {\n        case 'initial':\n          if (questionIndex < fixedQuestions.length) {\n            askNextQuestion();\n          } else {\n            getMenuRecommendations();\n          }\n          break;\n        case 'menu_selection':\n          setSelectedMenu(userInput);\n          const newExcludedMenus = [...excludedMenus, userInput];\n          setExcludedMenus(newExcludedMenus);\n          const newAvailableMenus = availableMenus.filter(menu => menu !== userInput);\n          setAvailableMenus(newAvailableMenus);\n          addMessage(`${userInput} 메뉴를 선택하셨습니다.`, false);\n          addMessage('법대후문, 고대정문앞, 고대사거리, 정대후문, 참살이길, 안암로터리, 제기동, 이공계, 교내 중 원하시는 지역들을 입력해주세요. 여러 지역을 입력하실 경우 쉼표로 구분해주세요.', false);\n          setStage('location_selection');\n          break;\n        case 'location_selection':\n          const locations = userInput.split(',').map(loc => loc.trim());\n          setUserLocations(locations);\n          addMessage(`선택하신 지역은 \"${locations.join(', ')}\"입니다.`, false);\n          addMessage('좋아요! 해당 지역들을 바탕으로 식당을 추천해줄게요. 만족도, 분위기, 서비스, 맛, 양, 위생과 관련해서 의견을 제시해주세요.', false);\n          setStage('preferences');\n          break;\n        case 'preferences':\n          await recommendRestaurants(userInput);\n          break;\n        case 'restart_prompt':\n          if (lowerInput === '네' || lowerInput === '예' || lowerInput === '다시시작') {\n            setExcludedMenus([]);\n            setMessages([]);\n            setStage('initial');\n            startMenuRecommendation();\n          } else {\n            addMessage(\"대화를 종료합니다. 새로운 추천이 필요하시면 페이지를 새로고침해 주세요.\", false);\n          }\n          break;\n        case 'completed':\n          if (lowerInput === '다시시작') {\n            startMenuRecommendation();\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  };\n  const recommendRestaurants = async preferences => {\n    try {\n      console.log('Sending request with:', {\n        selected_menu: selectedMenu,\n        store_type: selectedStore,\n        max_price: budget,\n        locations: userLocations,\n        user_preferences: preferences\n      });\n      const response = await fetch(`${config.apiUrl}/api/recommend-restaurants`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          selected_menu: selectedMenu,\n          store_type: selectedStore,\n          max_price: budget,\n          locations: userLocations,\n          user_preferences: preferences\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        addMessage(/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: data.recommended_restaurants\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 28\n        }, this), false);\n        setStage('completed');\n        addMessage('다른 메뉴나 지역을 추천받고 싶으시면 \"다시 시작\"이라고 입력해주세요.', false);\n      } else {\n        addMessage(data.error || '식당 추천 중 오류가 발생했습니다.', false);\n        if (data.error.includes('조건에 맞는 레스토랑을 찾을 수 없습니다')) {\n          addMessage('다른 메뉴나 위치를 선택해보시겠어요? \"다시 시작\"이라고 입력하시면 처음부터 다시 시작할 수 있습니다.', false);\n          setStage('completed');\n        }\n        if (data.traceback) {\n          setDebugInfo(`오류 내용:\\n${data.error}\\n\\n스택 트레이스:\\n${data.traceback}`);\n          addMessage('오류가 발생했습니다. 개발자에게 문의하실 때 아래의 디버그 정보를 함께 보내주세요.', false);\n        }\n      }\n    } catch (error) {\n      console.error('Error recommending restaurants:', error.message, error.stack);\n      addMessage('죄송합니다. 식당 추천 중 오류가 발생했습니다. 다시 시도해 주세요.', false);\n      setDebugInfo(`클라이언트 오류:\\n${error.message}\\n\\n${error.stack}`);\n      setStage('completed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"\\\\logo.png\",\n        alt: \"\\uC784\\uC2DC\\uB85C\\uACE0\",\n        className: \"logo-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: \"\\uCFE0\\uC787\\uB098\\uC6B0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.isUser ? 'user' : 'bot'}`,\n        children: [!msg.isUser && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-bubble\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }, this)), debugInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uB514\\uBC84\\uADF8 \\uC815\\uBCF4 (\\uAC1C\\uBC1C\\uC790\\uC6A9)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: debugInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            navigator.clipboard.writeText(debugInfo);\n          },\n          children: \"\\uB514\\uBC84\\uADF8 \\uC815\\uBCF4 \\uBCF5\\uC0AC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"userInput\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n        className: \"chat-input\",\n        onKeyPress: e => {\n          if (e.key === 'Enter') handleSendMessage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleButtonClick,\n        className: \"send-button\",\n        style: {\n          backgroundImage: isClicked ? `url('/sending_button_2.png')` // 클릭 시 이미지 교체\n          : `url('/sending_button_1.png')`,\n          // 기본 이미지\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          backgroundPosition: 'center',\n          width: '60px',\n          // 버튼 크기 설정\n          height: '40px',\n          border: 'none',\n          cursor: 'pointer'\n        },\n        onMouseDown: () => setIsClicked(true) //클릭 시 이미지 변경\n        ,\n        onMouseUp: () => setIsClicked(false) //클릭 해제 시 다시 원상태\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 9\n  }, this);\n}\n_s(UserInputScreen, \"VaCBJy10FTQY6zgJFRxL2r7zPOk=\", false, function () {\n  return [useLocation];\n});\n_c = UserInputScreen;\nexport default UserInputScreen;\nvar _c;\n$RefreshReg$(_c, \"UserInputScreen\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","config","jsxDEV","_jsxDEV","fixedQuestions","UserInputScreen","_s","location","menuList","initialMenuList","selectedStore","budget","state","messages","setMessages","setMenuList","recommendedMenus","setRecommendedMenus","questionIndex","setQuestionIndex","stage","setStage","selectedMenu","setSelectedMenu","userLocations","setUserLocations","debugInfo","setDebugInfo","excludedMenus","setExcludedMenus","allMenus","setAllMenus","availableMenus","setAvailableMenus","isClicked","setIsClicked","handleButtonClick","handleSendMessage","fetchAllMenus","startMenuRecommendation","response","fetch","apiUrl","data","json","success","menus","console","log","error","addMessage","content","isUser","prev","storeTypeKorean","askNextQuestion","length","prevIndex","getMenuRecommendations","isRecommendation","method","headers","body","JSON","stringify","menu_list","excluded_menus","conversation","map","msg","role","store_type","recommended_menus","messagePrefix","join","userInput","document","getElementById","value","trim","lowerInput","toLowerCase","replace","newExcludedMenus","newAvailableMenus","filter","menu","includes","locations","split","loc","recommendRestaurants","preferences","selected_menu","max_price","user_preferences","dangerouslySetInnerHTML","__html","recommended_restaurants","fileName","_jsxFileName","lineNumber","columnNumber","traceback","message","stack","className","children","src","alt","index","onClick","navigator","clipboard","writeText","type","id","placeholder","onKeyPress","e","key","style","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","width","height","border","cursor","onMouseDown","onMouseUp","_c","$RefreshReg$"],"sources":["C:/Users/Kdonghoon/OneDrive/바탕 화면/midtermProject_combined/FE/src/components/UserInputScreen/UserInputScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './UserInputScreen.css';\r\nimport config from '../../config';\r\n\r\nconst fixedQuestions = [\r\n    \"오늘 식사는 어땠으면 좋겠어? 간단한 한 끼, 든든한 한끼 등으로 답해줘!\",\r\n    \"어떤 맛이 메뉴에서 도드라졌으면 좋겠어? (단맛, 매운맛, 짠맛 등)\",\r\n    \"국물 요리가 좋을까, 아니면 볶음/구이 같은 메뉴가 좋을까?\",\r\n    \"먹고 싶은 요리의 장르를 알려줘! 딱히 없다면 없다고 말해줘.(한식, 중식, 일식, 양식 등)\",\r\n    \"오늘은 면 요리가 좋을까, 밥 요리가 좋을까? 아니면 그 외?\",\r\n    \"또 추천에서 고려해야 할 사항이 있을까?\"\r\n];\r\n\r\nfunction UserInputScreen() {\r\n    const location = useLocation();\r\n    const { menuList: initialMenuList = [], selectedStore = '', budget = 0 } = location.state || {};\r\n    const [messages, setMessages] = useState([]);\r\n    const [menuList, setMenuList] = useState(initialMenuList);\r\n    const [recommendedMenus, setRecommendedMenus] = useState([]);\r\n    const [questionIndex, setQuestionIndex] = useState(0);\r\n    const [stage, setStage] = useState('initial');\r\n    const [selectedMenu, setSelectedMenu] = useState('');\r\n    const [userLocations, setUserLocations] = useState([]);\r\n    const [debugInfo, setDebugInfo] = useState('');\r\n    const [excludedMenus, setExcludedMenus] = useState([]);\r\n    const [allMenus, setAllMenus] = useState([]);\r\n    const [availableMenus, setAvailableMenus] = useState([]);\r\n    const [isClicked, setIsClicked] = useState(false);\r\n    const handleButtonClick = () => {\r\n        setIsClicked(true); // 버튼 클릭 시 클릭 상태 변경\r\n        handleSendMessage();\r\n      };\r\n    \r\n      \r\n    useEffect(() => {\r\n        fetchAllMenus();\r\n        startMenuRecommendation();\r\n    }, [selectedStore, budget]);\r\n\r\n    const fetchAllMenus = async () => {\r\n        try {\r\n            const response = await fetch(`${config.apiUrl}/api/all-menus`);\r\n            const data = await response.json();\r\n            if (data.success) {\r\n                setAllMenus(data.menus);\r\n                setAvailableMenus(data.menus);\r\n                console.log(\"가져온 전체 메뉴 목록:\", data.menus);\r\n            }\r\n        } catch (error) {\r\n            console.error('메뉴 목록을 가져오는 중 오류 발생:', error);\r\n        }\r\n    };\r\n\r\n    const addMessage = (content, isUser) => {\r\n        setMessages(prev => [...prev, { content, isUser }]);\r\n    };\r\n\r\n    const startMenuRecommendation = () => {\r\n        setMessages([]);\r\n        setQuestionIndex(0);\r\n        setStage('initial');\r\n        setSelectedMenu('');\r\n        setUserLocations([]);\r\n        setExcludedMenus([]);\r\n        setAvailableMenus(allMenus);\r\n        const storeTypeKorean = selectedStore === 'restaurant' ? '밥집' : selectedStore === 'cafe' ? '카페' : '술집';\r\n        addMessage(`안녕하세요! ${storeTypeKorean}에서 예산 ${budget}원으로 메뉴를 추천드리겠습니다.`, false);\r\n        askNextQuestion();\r\n    };\r\n\r\n    const askNextQuestion = () => {\r\n        if (questionIndex < fixedQuestions.length) {\r\n            addMessage(fixedQuestions[questionIndex], false);\r\n            setQuestionIndex(prevIndex => prevIndex + 1);\r\n        } else {\r\n            getMenuRecommendations();\r\n        }\r\n    };\r\n\r\n    const getMenuRecommendations = async (isRecommendation = false) => {\r\n        try {\r\n            console.log(\"현재 사용 가능한 메뉴 목록:\", availableMenus);\r\n            console.log(\"제외된 메뉴 목록:\", excludedMenus);\r\n            \r\n            if (availableMenus.length < 3) {\r\n                addMessage(\"죄송합니다. 더 이상 추천할 수 있는 메뉴가 없습니다. 처음부터 다시 시작하시겠습니까?\", false);\r\n                setStage('restart_prompt');\r\n                return;\r\n            }\r\n\r\n            const response = await fetch(`${config.apiUrl}/api/menu-selection`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    menu_list: availableMenus,\r\n                    excluded_menus: excludedMenus,\r\n                    conversation: messages.map(msg => ({\r\n                        role: msg.isUser ? 'user' : 'assistant',\r\n                        content: msg.content\r\n                    })),\r\n                    store_type: selectedStore\r\n                }),\r\n            });\r\n            const data = await response.json();\r\n    \r\n            if (data.success) {\r\n                setRecommendedMenus(data.recommended_menus);\r\n                console.log(\"추천된 메뉴:\", data.recommended_menus);\r\n                const messagePrefix = isRecommendation ? \"새로운 추천 메뉴: \" : \"추천 메뉴: \";\r\n                addMessage(`${messagePrefix}${data.recommended_menus.join(', ')}`, false);\r\n                addMessage('위 메뉴 중에서 선택하고 싶은 메뉴를 입력해주세요. 없다면 \"다시 추천\"이라고 입력해주세요.', false);\r\n                setStage('menu_selection');\r\n            }\r\n        } catch (error) {\r\n            console.error('메뉴 추천 중 오류 발생:', error);\r\n            addMessage('죄송합니다. 메뉴 추천 중 오류가 발생했습니다.', false);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        const userInput = document.getElementById('userInput').value.trim();\r\n        if (userInput) {\r\n            addMessage(userInput, true);\r\n            document.getElementById('userInput').value = '';\r\n\r\n            const lowerInput = userInput.toLowerCase().replace(/\\s/g, '');\r\n            if (lowerInput === '다시추천' || lowerInput === '다시추천') {\r\n                const newExcludedMenus = [...excludedMenus, ...recommendedMenus];\r\n                setExcludedMenus(newExcludedMenus);\r\n                const newAvailableMenus = availableMenus.filter(menu => !newExcludedMenus.includes(menu));\r\n                setAvailableMenus(newAvailableMenus);\r\n                console.log(\"다시 추천 요청. 현재 제외된 메뉴:\", newExcludedMenus);\r\n                console.log(\"남은 사용 가능한 메뉴:\", newAvailableMenus);\r\n                await getMenuRecommendations(true);\r\n                return;\r\n            }\r\n\r\n            switch (stage) {\r\n                case 'initial':\r\n                    if (questionIndex < fixedQuestions.length) {\r\n                        askNextQuestion();\r\n                    } else {\r\n                        getMenuRecommendations();\r\n                    }\r\n                    break;\r\n                case 'menu_selection':\r\n                    setSelectedMenu(userInput);\r\n                    const newExcludedMenus = [...excludedMenus, userInput];\r\n                    setExcludedMenus(newExcludedMenus);\r\n                    const newAvailableMenus = availableMenus.filter(menu => menu !== userInput);\r\n                    setAvailableMenus(newAvailableMenus);\r\n                    addMessage(`${userInput} 메뉴를 선택하셨습니다.`, false);\r\n                    addMessage('법대후문, 고대정문앞, 고대사거리, 정대후문, 참살이길, 안암로터리, 제기동, 이공계, 교내 중 원하시는 지역들을 입력해주세요. 여러 지역을 입력하실 경우 쉼표로 구분해주세요.', false);\r\n                    setStage('location_selection');\r\n                    break;\r\n                case 'location_selection':\r\n                    const locations = userInput.split(',').map(loc => loc.trim());\r\n                    setUserLocations(locations);\r\n                    addMessage(`선택하신 지역은 \"${locations.join(', ')}\"입니다.`, false);\r\n                    addMessage('좋아요! 해당 지역들을 바탕으로 식당을 추천해줄게요. 만족도, 분위기, 서비스, 맛, 양, 위생과 관련해서 의견을 제시해주세요.', false);\r\n                    setStage('preferences');\r\n                    break;\r\n                case 'preferences':\r\n                    await recommendRestaurants(userInput);\r\n                    break;\r\n                case 'restart_prompt':\r\n                    if (lowerInput === '네' || lowerInput === '예' || lowerInput === '다시시작') {\r\n                        setExcludedMenus([]);\r\n                        setMessages([]);\r\n                        setStage('initial');\r\n                        startMenuRecommendation();\r\n                    } else {\r\n                        addMessage(\"대화를 종료합니다. 새로운 추천이 필요하시면 페이지를 새로고침해 주세요.\", false);\r\n                    }\r\n                    break;\r\n                case 'completed':\r\n                    if (lowerInput === '다시시작') {\r\n                        startMenuRecommendation();\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n\r\n    const recommendRestaurants = async (preferences) => {\r\n        try {\r\n            console.log('Sending request with:', {\r\n                selected_menu: selectedMenu,\r\n                store_type: selectedStore,\r\n                max_price: budget,\r\n                locations: userLocations,\r\n                user_preferences: preferences\r\n            });\r\n    \r\n            const response = await fetch(`${config.apiUrl}/api/recommend-restaurants`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    selected_menu: selectedMenu,\r\n                    store_type: selectedStore,\r\n                    max_price: budget,\r\n                    locations: userLocations,\r\n                    user_preferences: preferences\r\n                }),\r\n            });\r\n            const data = await response.json();\r\n    \r\n            if (data.success) {\r\n                addMessage(<div dangerouslySetInnerHTML={{ __html: data.recommended_restaurants }} />, false);\r\n                setStage('completed');\r\n                addMessage('다른 메뉴나 지역을 추천받고 싶으시면 \"다시 시작\"이라고 입력해주세요.', false);\r\n            } else {\r\n                addMessage(data.error || '식당 추천 중 오류가 발생했습니다.', false);\r\n                if (data.error.includes('조건에 맞는 레스토랑을 찾을 수 없습니다')) {\r\n                    addMessage('다른 메뉴나 위치를 선택해보시겠어요? \"다시 시작\"이라고 입력하시면 처음부터 다시 시작할 수 있습니다.', false);\r\n                    setStage('completed');\r\n                }\r\n                if (data.traceback) {\r\n                    setDebugInfo(`오류 내용:\\n${data.error}\\n\\n스택 트레이스:\\n${data.traceback}`);\r\n                    addMessage('오류가 발생했습니다. 개발자에게 문의하실 때 아래의 디버그 정보를 함께 보내주세요.', false);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error recommending restaurants:', error.message, error.stack);\r\n            addMessage('죄송합니다. 식당 추천 중 오류가 발생했습니다. 다시 시도해 주세요.', false);\r\n            setDebugInfo(`클라이언트 오류:\\n${error.message}\\n\\n${error.stack}`);\r\n            setStage('completed');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <header className=\"header\">\r\n                <img src=\"\\logo.png\" alt=\"임시로고\" className=\"logo-image\" />\r\n        </header>\r\n            <header className=\"chat-header\">쿠잇나우</header>\r\n            <div className=\"chat-messages\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.isUser ? 'user' : 'bot'}`}>\r\n                        {!msg.isUser && <div className=\"circle bot\"></div>}\r\n                        <div className=\"message-bubble\">{msg.content}</div>\r\n                    </div>\r\n                ))}\r\n                {debugInfo && (\r\n                    <div className=\"debug-info\">\r\n                        <h4>디버그 정보 (개발자용)</h4>\r\n                        <pre>{debugInfo}</pre>\r\n                        <button onClick={() => {navigator.clipboard.writeText(debugInfo)}}>\r\n                            디버그 정보 복사\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"chat-input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"userInput\"\r\n                    placeholder=\"메시지를 입력해주세요.\"\r\n                    className=\"chat-input\"\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === 'Enter') handleSendMessage();\r\n                    }}\r\n                />\r\n                <button \r\n                   onClick={handleButtonClick} \r\n                   className=\"send-button\"\r\n                   style={{\r\n                    backgroundImage: isClicked\r\n                        ? `url('/sending_button_2.png')` // 클릭 시 이미지 교체\r\n                        : `url('/sending_button_1.png')`, // 기본 이미지\r\n                    backgroundSize: 'cover',\r\n                    backgroundRepeat: 'no-repeat',\r\n                    backgroundPosition: 'center',\r\n                    width: '60px', // 버튼 크기 설정\r\n                    height: '40px',\r\n                    border: 'none',\r\n                    cursor: 'pointer',\r\n                   }}\r\n                   onMouseDown={() => setIsClicked(true)}//클릭 시 이미지 변경\r\n                   onMouseUp={() => setIsClicked(false)}//클릭 해제 시 다시 원상태\r\n                ></button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserInputScreen;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,uBAAuB;AAC9B,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,cAAc,GAAG,CACnB,2CAA2C,EAC3C,wCAAwC,EACxC,mCAAmC,EACnC,sDAAsD,EACtD,oCAAoC,EACpC,wBAAwB,CAC3B;AAED,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEQ,QAAQ,EAAEC,eAAe,GAAG,EAAE;IAAEC,aAAa,GAAG,EAAE;IAAEC,MAAM,GAAG;EAAE,CAAC,GAAGJ,QAAQ,CAACK,KAAK,IAAI,CAAC,CAAC;EAC/F,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEO,WAAW,CAAC,GAAGjB,QAAQ,CAACW,eAAe,CAAC;EACzD,MAAM,CAACO,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,SAAS,CAAC;EAC7C,MAAM,CAACwB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC0B,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC4B,SAAS,EAAEC,YAAY,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC8B,aAAa,EAAEC,gBAAgB,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACgC,QAAQ,EAAEC,WAAW,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkC,cAAc,EAAEC,iBAAiB,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACoC,SAAS,EAAEC,YAAY,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMsC,iBAAiB,GAAGA,CAAA,KAAM;IAC5BD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpBE,iBAAiB,CAAC,CAAC;EACrB,CAAC;EAGHtC,SAAS,CAAC,MAAM;IACZuC,aAAa,CAAC,CAAC;IACfC,uBAAuB,CAAC,CAAC;EAC7B,CAAC,EAAE,CAAC7B,aAAa,EAAEC,MAAM,CAAC,CAAC;EAE3B,MAAM2B,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxC,MAAM,CAACyC,MAAM,gBAAgB,CAAC;MAC9D,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,OAAO,EAAE;QACdd,WAAW,CAACY,IAAI,CAACG,KAAK,CAAC;QACvBb,iBAAiB,CAACU,IAAI,CAACG,KAAK,CAAC;QAC7BC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEL,IAAI,CAACG,KAAK,CAAC;MAC5C;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,MAAMC,UAAU,GAAGA,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpCtC,WAAW,CAACuC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAEF,OAAO;MAAEC;IAAO,CAAC,CAAC,CAAC;EACvD,CAAC;EAED,MAAMb,uBAAuB,GAAGA,CAAA,KAAM;IAClCzB,WAAW,CAAC,EAAE,CAAC;IACfK,gBAAgB,CAAC,CAAC,CAAC;IACnBE,QAAQ,CAAC,SAAS,CAAC;IACnBE,eAAe,CAAC,EAAE,CAAC;IACnBE,gBAAgB,CAAC,EAAE,CAAC;IACpBI,gBAAgB,CAAC,EAAE,CAAC;IACpBI,iBAAiB,CAACH,QAAQ,CAAC;IAC3B,MAAMwB,eAAe,GAAG5C,aAAa,KAAK,YAAY,GAAG,IAAI,GAAGA,aAAa,KAAK,MAAM,GAAG,IAAI,GAAG,IAAI;IACtGwC,UAAU,CAAC,UAAUI,eAAe,SAAS3C,MAAM,mBAAmB,EAAE,KAAK,CAAC;IAC9E4C,eAAe,CAAC,CAAC;EACrB,CAAC;EAED,MAAMA,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAIrC,aAAa,GAAGd,cAAc,CAACoD,MAAM,EAAE;MACvCN,UAAU,CAAC9C,cAAc,CAACc,aAAa,CAAC,EAAE,KAAK,CAAC;MAChDC,gBAAgB,CAACsC,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;IAChD,CAAC,MAAM;MACHC,sBAAsB,CAAC,CAAC;IAC5B;EACJ,CAAC;EAED,MAAMA,sBAAsB,GAAG,MAAAA,CAAOC,gBAAgB,GAAG,KAAK,KAAK;IAC/D,IAAI;MACAZ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEhB,cAAc,CAAC;MAC/Ce,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEpB,aAAa,CAAC;MAExC,IAAII,cAAc,CAACwB,MAAM,GAAG,CAAC,EAAE;QAC3BN,UAAU,CAAC,kDAAkD,EAAE,KAAK,CAAC;QACrE7B,QAAQ,CAAC,gBAAgB,CAAC;QAC1B;MACJ;MAEA,MAAMmB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxC,MAAM,CAACyC,MAAM,qBAAqB,EAAE;QAChEkB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,SAAS,EAAEjC,cAAc;UACzBkC,cAAc,EAAEtC,aAAa;UAC7BuC,YAAY,EAAEtD,QAAQ,CAACuD,GAAG,CAACC,GAAG,KAAK;YAC/BC,IAAI,EAAED,GAAG,CAACjB,MAAM,GAAG,MAAM,GAAG,WAAW;YACvCD,OAAO,EAAEkB,GAAG,CAAClB;UACjB,CAAC,CAAC,CAAC;UACHoB,UAAU,EAAE7D;QAChB,CAAC;MACL,CAAC,CAAC;MACF,MAAMiC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QACd5B,mBAAmB,CAAC0B,IAAI,CAAC6B,iBAAiB,CAAC;QAC3CzB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEL,IAAI,CAAC6B,iBAAiB,CAAC;QAC9C,MAAMC,aAAa,GAAGd,gBAAgB,GAAG,aAAa,GAAG,SAAS;QAClET,UAAU,CAAC,GAAGuB,aAAa,GAAG9B,IAAI,CAAC6B,iBAAiB,CAACE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC;QACzExB,UAAU,CAAC,qDAAqD,EAAE,KAAK,CAAC;QACxE7B,QAAQ,CAAC,gBAAgB,CAAC;MAC9B;IACJ,CAAC,CAAC,OAAO4B,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtCC,UAAU,CAAC,4BAA4B,EAAE,KAAK,CAAC;IACnD;EACJ,CAAC;EAED,MAAMb,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMsC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC;IACnE,IAAIJ,SAAS,EAAE;MACXzB,UAAU,CAACyB,SAAS,EAAE,IAAI,CAAC;MAC3BC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,KAAK,GAAG,EAAE;MAE/C,MAAME,UAAU,GAAGL,SAAS,CAACM,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;MAC7D,IAAIF,UAAU,KAAK,MAAM,IAAIA,UAAU,KAAK,MAAM,EAAE;QAChD,MAAMG,gBAAgB,GAAG,CAAC,GAAGvD,aAAa,EAAE,GAAGZ,gBAAgB,CAAC;QAChEa,gBAAgB,CAACsD,gBAAgB,CAAC;QAClC,MAAMC,iBAAiB,GAAGpD,cAAc,CAACqD,MAAM,CAACC,IAAI,IAAI,CAACH,gBAAgB,CAACI,QAAQ,CAACD,IAAI,CAAC,CAAC;QACzFrD,iBAAiB,CAACmD,iBAAiB,CAAC;QACpCrC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEmC,gBAAgB,CAAC;QACrDpC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEoC,iBAAiB,CAAC;QAC/C,MAAM1B,sBAAsB,CAAC,IAAI,CAAC;QAClC;MACJ;MAEA,QAAQtC,KAAK;QACT,KAAK,SAAS;UACV,IAAIF,aAAa,GAAGd,cAAc,CAACoD,MAAM,EAAE;YACvCD,eAAe,CAAC,CAAC;UACrB,CAAC,MAAM;YACHG,sBAAsB,CAAC,CAAC;UAC5B;UACA;QACJ,KAAK,gBAAgB;UACjBnC,eAAe,CAACoD,SAAS,CAAC;UAC1B,MAAMQ,gBAAgB,GAAG,CAAC,GAAGvD,aAAa,EAAE+C,SAAS,CAAC;UACtD9C,gBAAgB,CAACsD,gBAAgB,CAAC;UAClC,MAAMC,iBAAiB,GAAGpD,cAAc,CAACqD,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAKX,SAAS,CAAC;UAC3E1C,iBAAiB,CAACmD,iBAAiB,CAAC;UACpClC,UAAU,CAAC,GAAGyB,SAAS,eAAe,EAAE,KAAK,CAAC;UAC9CzB,UAAU,CAAC,oGAAoG,EAAE,KAAK,CAAC;UACvH7B,QAAQ,CAAC,oBAAoB,CAAC;UAC9B;QACJ,KAAK,oBAAoB;UACrB,MAAMmE,SAAS,GAAGb,SAAS,CAACc,KAAK,CAAC,GAAG,CAAC,CAACrB,GAAG,CAACsB,GAAG,IAAIA,GAAG,CAACX,IAAI,CAAC,CAAC,CAAC;UAC7DtD,gBAAgB,CAAC+D,SAAS,CAAC;UAC3BtC,UAAU,CAAC,aAAasC,SAAS,CAACd,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;UAC3DxB,UAAU,CAAC,yEAAyE,EAAE,KAAK,CAAC;UAC5F7B,QAAQ,CAAC,aAAa,CAAC;UACvB;QACJ,KAAK,aAAa;UACd,MAAMsE,oBAAoB,CAAChB,SAAS,CAAC;UACrC;QACJ,KAAK,gBAAgB;UACjB,IAAIK,UAAU,KAAK,GAAG,IAAIA,UAAU,KAAK,GAAG,IAAIA,UAAU,KAAK,MAAM,EAAE;YACnEnD,gBAAgB,CAAC,EAAE,CAAC;YACpBf,WAAW,CAAC,EAAE,CAAC;YACfO,QAAQ,CAAC,SAAS,CAAC;YACnBkB,uBAAuB,CAAC,CAAC;UAC7B,CAAC,MAAM;YACHW,UAAU,CAAC,0CAA0C,EAAE,KAAK,CAAC;UACjE;UACA;QACJ,KAAK,WAAW;UACZ,IAAI8B,UAAU,KAAK,MAAM,EAAE;YACvBzC,uBAAuB,CAAC,CAAC;UAC7B;UACA;QACJ;UACI;MACR;IACJ;EACJ,CAAC;EAED,MAAMoD,oBAAoB,GAAG,MAAOC,WAAW,IAAK;IAChD,IAAI;MACA7C,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;QACjC6C,aAAa,EAAEvE,YAAY;QAC3BiD,UAAU,EAAE7D,aAAa;QACzBoF,SAAS,EAAEnF,MAAM;QACjB6E,SAAS,EAAEhE,aAAa;QACxBuE,gBAAgB,EAAEH;MACtB,CAAC,CAAC;MAEF,MAAMpD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxC,MAAM,CAACyC,MAAM,4BAA4B,EAAE;QACvEkB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjB6B,aAAa,EAAEvE,YAAY;UAC3BiD,UAAU,EAAE7D,aAAa;UACzBoF,SAAS,EAAEnF,MAAM;UACjB6E,SAAS,EAAEhE,aAAa;UACxBuE,gBAAgB,EAAEH;QACtB,CAAC;MACL,CAAC,CAAC;MACF,MAAMjD,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QACdK,UAAU,cAAC/C,OAAA;UAAK6F,uBAAuB,EAAE;YAAEC,MAAM,EAAEtD,IAAI,CAACuD;UAAwB;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAAE,KAAK,CAAC;QAC7FjF,QAAQ,CAAC,WAAW,CAAC;QACrB6B,UAAU,CAAC,yCAAyC,EAAE,KAAK,CAAC;MAChE,CAAC,MAAM;QACHA,UAAU,CAACP,IAAI,CAACM,KAAK,IAAI,qBAAqB,EAAE,KAAK,CAAC;QACtD,IAAIN,IAAI,CAACM,KAAK,CAACsC,QAAQ,CAAC,wBAAwB,CAAC,EAAE;UAC/CrC,UAAU,CAAC,2DAA2D,EAAE,KAAK,CAAC;UAC9E7B,QAAQ,CAAC,WAAW,CAAC;QACzB;QACA,IAAIsB,IAAI,CAAC4D,SAAS,EAAE;UAChB5E,YAAY,CAAC,WAAWgB,IAAI,CAACM,KAAK,iBAAiBN,IAAI,CAAC4D,SAAS,EAAE,CAAC;UACpErD,UAAU,CAAC,gDAAgD,EAAE,KAAK,CAAC;QACvE;MACJ;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACuD,OAAO,EAAEvD,KAAK,CAACwD,KAAK,CAAC;MAC5EvD,UAAU,CAAC,wCAAwC,EAAE,KAAK,CAAC;MAC3DvB,YAAY,CAAC,cAAcsB,KAAK,CAACuD,OAAO,OAAOvD,KAAK,CAACwD,KAAK,EAAE,CAAC;MAC7DpF,QAAQ,CAAC,WAAW,CAAC;IACzB;EACJ,CAAC;EAED,oBACIlB,OAAA;IAAKuG,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3BxG,OAAA;MAAQuG,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACtBxG,OAAA;QAAKyG,GAAG,EAAC,YAAW;QAACC,GAAG,EAAC,0BAAM;QAACH,SAAS,EAAC;MAAY;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD,CAAC,eACLnG,OAAA;MAAQuG,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAI;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC7CnG,OAAA;MAAKuG,SAAS,EAAC,eAAe;MAAAC,QAAA,GACzB9F,QAAQ,CAACuD,GAAG,CAAC,CAACC,GAAG,EAAEyC,KAAK,kBACrB3G,OAAA;QAAiBuG,SAAS,EAAE,WAAWrC,GAAG,CAACjB,MAAM,GAAG,MAAM,GAAG,KAAK,EAAG;QAAAuD,QAAA,GAChE,CAACtC,GAAG,CAACjB,MAAM,iBAAIjD,OAAA;UAAKuG,SAAS,EAAC;QAAY;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAClDnG,OAAA;UAAKuG,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAAEtC,GAAG,CAAClB;QAAO;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GAF7CQ,KAAK;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACR,CAAC,EACD5E,SAAS,iBACNvB,OAAA;QAAKuG,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBxG,OAAA;UAAAwG,QAAA,EAAI;QAAa;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtBnG,OAAA;UAAAwG,QAAA,EAAMjF;QAAS;UAAAyE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACtBnG,OAAA;UAAQ4G,OAAO,EAAEA,CAAA,KAAM;YAACC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACxF,SAAS,CAAC;UAAA,CAAE;UAAAiF,QAAA,EAAC;QAEnE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACNnG,OAAA;MAAKuG,SAAS,EAAC,sBAAsB;MAAAC,QAAA,gBACjCxG,OAAA;QACIgH,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,WAAW;QACdC,WAAW,EAAC,gEAAc;QAC1BX,SAAS,EAAC,YAAY;QACtBY,UAAU,EAAGC,CAAC,IAAK;UACf,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAEnF,iBAAiB,CAAC,CAAC;QAC9C;MAAE;QAAA8D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACFnG,OAAA;QACG4G,OAAO,EAAE3E,iBAAkB;QAC3BsE,SAAS,EAAC,aAAa;QACvBe,KAAK,EAAE;UACNC,eAAe,EAAExF,SAAS,GACpB,8BAA8B,CAAC;UAAA,EAC/B,8BAA8B;UAAE;UACtCyF,cAAc,EAAE,OAAO;UACvBC,gBAAgB,EAAE,WAAW;UAC7BC,kBAAkB,EAAE,QAAQ;UAC5BC,KAAK,EAAE,MAAM;UAAE;UACfC,MAAM,EAAE,MAAM;UACdC,MAAM,EAAE,MAAM;UACdC,MAAM,EAAE;QACT,CAAE;QACFC,WAAW,EAAEA,CAAA,KAAM/F,YAAY,CAAC,IAAI,CAAE;QAAA;QACtCgG,SAAS,EAAEA,CAAA,KAAMhG,YAAY,CAAC,KAAK,CAAE;MAAA;QAAAgE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAChG,EAAA,CArRQD,eAAe;EAAA,QACHL,WAAW;AAAA;AAAAoI,EAAA,GADvB/H,eAAe;AAuRxB,eAAeA,eAAe;AAAC,IAAA+H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}