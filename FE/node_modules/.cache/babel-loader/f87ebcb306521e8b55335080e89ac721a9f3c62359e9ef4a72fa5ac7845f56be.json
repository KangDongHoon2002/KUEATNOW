{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kdonghoon\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\midtermProject_combined\\\\FE\\\\src\\\\components\\\\UserInputScreen\\\\UserInputScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './UserInputScreen.css';\nimport config from '../../config';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction UserInputScreen() {\n  _s();\n  const location = useLocation();\n  const {\n    menuList: initialMenuList,\n    selectedStore,\n    budget\n  } = location.state;\n  const [messages, setMessages] = useState([]);\n  const [menuList, setMenuList] = useState(initialMenuList);\n  const [recommendedMenus, setRecommendedMenus] = useState([]);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [stage, setStage] = useState('question');\n  useEffect(() => {\n    const storeTypeKorean = selectedStore === 'restaurant' ? '밥집' : selectedStore === 'cafe' ? '카페' : '술집';\n    addMessage(`안녕하세요! ${storeTypeKorean}에서 예산 ${budget}원으로 메뉴를 추천드리겠습니다.`, false);\n    askQuestion();\n  }, []);\n  const addMessage = (content, isUser) => {\n    setMessages(prev => [...prev, {\n      content,\n      isUser\n    }]);\n  };\n  const askQuestion = async () => {\n    try {\n      const response = await fetch(`${config.apiUrl}/api/menu-selection/question`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          menu_list: menuList,\n          question_count: questionCount\n        })\n      });\n      const data = await response.json();\n      if (data.success && !data.recommend_menu) {\n        addMessage(data.question, false); // 한 번에 하나의 질문만 추가\n        setQuestionCount(prev => prev + 1); // 질문 카운트 증가\n      } else if (data.recommend_menu) {\n        addMessage('마지막 질문입니다. 이제 추천 메뉴를 드리겠습니다.', false);\n        await processUserResponse('마지막');\n      }\n    } catch (error) {\n      console.error('Error asking question:', error);\n      addMessage('죄송합니다. 오류가 발생했습니다.', false);\n    }\n  };\n  const processUserResponse = async userInput => {\n    try {\n      const response = await fetch(`${config.apiUrl}/api/menu-selection/process`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          menu_list: menuList,\n          user_response: userInput,\n          question_count: questionCount\n        })\n      });\n      const data = await response.json();\n      if (data.success && data.next_question) {\n        addMessage(data.next_question, false);\n      } else if (data.success && data.recommended_menus) {\n        setRecommendedMenus(data.recommended_menus);\n        addMessage(`추천 메뉴: ${data.recommended_menus.join(', ')}`, false);\n        addMessage('위 메뉴 중에서 선택하고 싶은 메뉴를 입력해주세요. 없다면 \"다시 추천\"이라고 입력해주세요.', false);\n        setStage('menu_selection');\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (error) {\n      console.error('Error processing response:', error);\n      addMessage('죄송합니다. 오류가 발생했습니다.', false);\n    }\n  };\n  const handleSendMessage = async () => {\n    const userInput = document.getElementById('userInput').value.trim();\n    if (userInput) {\n      addMessage(userInput, true);\n      document.getElementById('userInput').value = '';\n      if (stage === 'question') {\n        await processUserResponse(userInput);\n        if (questionCount < 5) {\n          await askQuestion();\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: \"\\uCFE0\\uC787\\uB098\\uC6B0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.isUser ? 'user' : 'bot'}`,\n        children: [!msg.isUser && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-bubble\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: stage !== 'completed' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"userInput\",\n          placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n          className: \"chat-input\",\n          onKeyPress: e => {\n            if (e.key === 'Enter') handleSendMessage();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"send-button\",\n          children: \"\\u25B6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n_s(UserInputScreen, \"qf9dH6kVJiZxv+Bq4+L79Y26gag=\", false, function () {\n  return [useLocation];\n});\n_c = UserInputScreen;\nexport default UserInputScreen;\nvar _c;\n$RefreshReg$(_c, \"UserInputScreen\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","config","jsxDEV","_jsxDEV","Fragment","_Fragment","UserInputScreen","_s","location","menuList","initialMenuList","selectedStore","budget","state","messages","setMessages","setMenuList","recommendedMenus","setRecommendedMenus","questionCount","setQuestionCount","stage","setStage","storeTypeKorean","addMessage","askQuestion","content","isUser","prev","response","fetch","apiUrl","method","headers","body","JSON","stringify","menu_list","question_count","data","json","success","recommend_menu","question","processUserResponse","error","console","userInput","user_response","next_question","recommended_menus","join","Error","handleSendMessage","document","getElementById","value","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","id","placeholder","onKeyPress","e","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Kdonghoon/OneDrive/바탕 화면/midtermProject_combined/FE/src/components/UserInputScreen/UserInputScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './UserInputScreen.css';\r\nimport config from '../../config';\r\n\r\nfunction UserInputScreen() {\r\n    const location = useLocation();\r\n    const { menuList: initialMenuList, selectedStore, budget } = location.state;\r\n    const [messages, setMessages] = useState([]);\r\n    const [menuList, setMenuList] = useState(initialMenuList);\r\n    const [recommendedMenus, setRecommendedMenus] = useState([]);\r\n    const [questionCount, setQuestionCount] = useState(0);\r\n    const [stage, setStage] = useState('question');\r\n\r\n    useEffect(() => {\r\n        const storeTypeKorean = selectedStore === 'restaurant' ? '밥집' : selectedStore === 'cafe' ? '카페' : '술집';\r\n        addMessage(`안녕하세요! ${storeTypeKorean}에서 예산 ${budget}원으로 메뉴를 추천드리겠습니다.`, false);\r\n        askQuestion();\r\n    }, []);\r\n\r\n    const addMessage = (content, isUser) => {\r\n        setMessages(prev => [...prev, { content, isUser }]);\r\n    };\r\n\r\n    const askQuestion = async () => {\r\n        try {\r\n            const response = await fetch(`${config.apiUrl}/api/menu-selection/question`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    menu_list: menuList,\r\n                    question_count: questionCount\r\n                }),\r\n            });\r\n            const data = await response.json();\r\n            \r\n            if (data.success && !data.recommend_menu) {\r\n                addMessage(data.question, false);  // 한 번에 하나의 질문만 추가\r\n                setQuestionCount(prev => prev + 1); // 질문 카운트 증가\r\n            } else if (data.recommend_menu) {\r\n                addMessage('마지막 질문입니다. 이제 추천 메뉴를 드리겠습니다.', false);\r\n                await processUserResponse('마지막');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error asking question:', error);\r\n            addMessage('죄송합니다. 오류가 발생했습니다.', false);\r\n        }\r\n    };\r\n    \r\n\r\n    const processUserResponse = async (userInput) => {\r\n        try {\r\n            const response = await fetch(`${config.apiUrl}/api/menu-selection/process`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    menu_list: menuList,\r\n                    user_response: userInput,\r\n                    question_count: questionCount\r\n                }),\r\n            });\r\n            const data = await response.json();\r\n    \r\n            if (data.success && data.next_question) {\r\n                addMessage(data.next_question, false);\r\n            } else if (data.success && data.recommended_menus) {\r\n                setRecommendedMenus(data.recommended_menus);\r\n                addMessage(`추천 메뉴: ${data.recommended_menus.join(', ')}`, false);\r\n                addMessage('위 메뉴 중에서 선택하고 싶은 메뉴를 입력해주세요. 없다면 \"다시 추천\"이라고 입력해주세요.', false);\r\n                setStage('menu_selection');\r\n            } else {\r\n                throw new Error(data.error);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error processing response:', error);\r\n            addMessage('죄송합니다. 오류가 발생했습니다.', false);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        const userInput = document.getElementById('userInput').value.trim();\r\n        if (userInput) {\r\n            addMessage(userInput, true);\r\n            document.getElementById('userInput').value = '';\r\n\r\n            if (stage === 'question') {\r\n                await processUserResponse(userInput);\r\n                if (questionCount < 5) {\r\n                    await askQuestion();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <header className=\"chat-header\">쿠잇나우</header>\r\n            <div className=\"chat-messages\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.isUser ? 'user' : 'bot'}`}>\r\n                        {!msg.isUser && <div className=\"circle bot\"></div>}\r\n                        <div className=\"message-bubble\">{msg.content}</div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"chat-input-container\">\r\n                {stage !== 'completed' && (\r\n                    <>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"userInput\"\r\n                            placeholder=\"메시지를 입력해주세요.\"\r\n                            className=\"chat-input\"\r\n                            onKeyPress={(e) => {\r\n                                if (e.key === 'Enter') handleSendMessage();\r\n                            }}\r\n                        />\r\n                        <button onClick={handleSendMessage} className=\"send-button\">\r\n                            ▶\r\n                        </button>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserInputScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}