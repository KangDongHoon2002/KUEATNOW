{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kdonghoon\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\midtermProject_combined\\\\FE\\\\src\\\\components\\\\UserInputScreen\\\\UserInputScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './UserInputScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserInputScreen() {\n  _s();\n  // 초기 메시지와 사용자 및 캐릭터의 대화 상태\n  const [messages, setMessages] = useState([{\n    sender: 'character',\n    text: '안녕하세요! [character_name]와 대화를 통해 지금 딱 먹고 싶은 음식을 골라보세요!'\n  }, {\n    sender: 'user',\n    text: '네, 감사합니다!'\n  }]);\n  const [input, setInput] = useState('');\n  const [menuList, setMenuList] = useState([]); // 메뉴 목록을 저장하는 상태\n  const [menuResList, setMenuResList] = useState([]); // 사용자 응답을 저장하는 상태\n  const [menuQuesList, setMenuQuesList] = useState([]); // 이전 질문 목록\n\n  // 입력값 변경 핸들러\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n\n  // 메시지 전송 및 다음 질문 요청\n  const handleSendMessage = async () => {\n    if (input.trim() !== '') {\n      // 사용자 입력 메시지 추가\n      setMessages([...messages, {\n        sender: 'user',\n        text: input\n      }]);\n      setMenuResList([...menuResList, input]); // 사용자 응답 추가\n\n      // 입력 필드 초기화\n      setInput('');\n\n      // Flask API로 다음 질문 요청\n      const response = await fetch('/api/menu-selection/question', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          menu_list: menuList,\n          menu_res_list: [...menuResList, input]\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        const newQuestion = data.menu_ques;\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'character',\n          text: newQuestion\n        }]);\n        setMenuQuesList([...menuQuesList, newQuestion]); // 새로운 질문 추가\n      } else {\n        console.error('Error:', data.error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: \"\\uCFE0\\uC787\\uB098\\uC6B0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: [msg.sender === 'character' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `circle ${msg.sender}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 56\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-bubble\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        children: \"\\u25B6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(UserInputScreen, \"XJ9JncmbMrEez/KPpfCHVMbChA0=\");\n_c = UserInputScreen;\nconst handleMenuRecommendation = async () => {\n  const response = await fetch('/api/menu-selection/recommend', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      menu_list: menuList,\n      menu_ques_list: menuQuesList,\n      menu_res_list: menuResList\n    })\n  });\n  const data = await response.json();\n  if (data.success) {\n    const recommendedMenus = data.recommended_menu;\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'character',\n      text: `추천 메뉴: ${recommendedMenus.join(', ')}`\n    }]);\n  } else {\n    console.error('Error:', data.error);\n  }\n};\nexport default UserInputScreen;\nvar _c;\n$RefreshReg$(_c, \"UserInputScreen\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UserInputScreen","_s","messages","setMessages","sender","text","input","setInput","menuList","setMenuList","menuResList","setMenuResList","menuQuesList","setMenuQuesList","handleInputChange","e","target","value","handleSendMessage","trim","response","fetch","method","headers","body","JSON","stringify","menu_list","menu_res_list","data","json","success","newQuestion","menu_ques","prevMessages","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","onChange","placeholder","onClick","_c","handleMenuRecommendation","menu_ques_list","recommendedMenus","recommended_menu","join","$RefreshReg$"],"sources":["C:/Users/Kdonghoon/OneDrive/바탕 화면/midtermProject_combined/FE/src/components/UserInputScreen/UserInputScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './UserInputScreen.css';\r\n\r\nfunction UserInputScreen() {\r\n    // 초기 메시지와 사용자 및 캐릭터의 대화 상태\r\n    const [messages, setMessages] = useState([\r\n        { sender: 'character', text: '안녕하세요! [character_name]와 대화를 통해 지금 딱 먹고 싶은 음식을 골라보세요!' },\r\n        { sender: 'user', text: '네, 감사합니다!' },\r\n    ]);\r\n\r\n    const [input, setInput] = useState('');\r\n    const [menuList, setMenuList] = useState([]); // 메뉴 목록을 저장하는 상태\r\n    const [menuResList, setMenuResList] = useState([]); // 사용자 응답을 저장하는 상태\r\n    const [menuQuesList, setMenuQuesList] = useState([]); // 이전 질문 목록\r\n\r\n    // 입력값 변경 핸들러\r\n    const handleInputChange = (e) => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    // 메시지 전송 및 다음 질문 요청\r\n    const handleSendMessage = async () => {\r\n        if (input.trim() !== '') {\r\n            // 사용자 입력 메시지 추가\r\n            setMessages([...messages, { sender: 'user', text: input }]);\r\n            setMenuResList([...menuResList, input]); // 사용자 응답 추가\r\n\r\n            // 입력 필드 초기화\r\n            setInput('');\r\n\r\n            // Flask API로 다음 질문 요청\r\n            const response = await fetch('/api/menu-selection/question', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    menu_list: menuList,\r\n                    menu_res_list: [...menuResList, input],\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            if (data.success) {\r\n                const newQuestion = data.menu_ques;\r\n                setMessages((prevMessages) => [...prevMessages, { sender: 'character', text: newQuestion }]);\r\n                setMenuQuesList([...menuQuesList, newQuestion]); // 새로운 질문 추가\r\n            } else {\r\n                console.error('Error:', data.error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <header className=\"chat-header\">쿠잇나우</header>\r\n            <div className=\"chat-messages\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.sender}`}>\r\n                        {msg.sender === 'character' && <div className={`circle ${msg.sender}`}></div>}\r\n                        <div className=\"message-bubble\">{msg.text}</div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"chat-input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"메시지를 입력해주세요.\"\r\n                    className=\"chat-input\"\r\n                />\r\n                <button onClick={handleSendMessage} className=\"send-button\">\r\n                    ▶\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst handleMenuRecommendation = async () => {\r\n    const response = await fetch('/api/menu-selection/recommend', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            menu_list: menuList,\r\n            menu_ques_list: menuQuesList,\r\n            menu_res_list: menuResList,\r\n        }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (data.success) {\r\n        const recommendedMenus = data.recommended_menu;\r\n        setMessages((prevMessages) => [...prevMessages, { sender: 'character', text: `추천 메뉴: ${recommendedMenus.join(', ')}` }]);\r\n    } else {\r\n        console.error('Error:', data.error);\r\n    }\r\n};\r\n\r\nexport default UserInputScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}