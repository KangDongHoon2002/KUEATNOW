{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kdonghoon\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\midtermProject_combined\\\\FE\\\\src\\\\components\\\\UserInputScreen\\\\UserInputScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './UserInputScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserInputScreen({\n  initialMenuList\n}) {\n  _s();\n  const [questionCount, setQuestionCount] = useState(0);\n  const [menuList, setMenuList] = useState(initialMenuList || []); // 이미 필터링된 메뉴 리스트\n  const [menuQuestionList, setMenuQuestionList] = useState([]);\n  const [menuResponseList, setMenuResponseList] = useState([]);\n  const [messages, setMessages] = useState([]);\n\n  // 사용자 메시지 전송 및 질문 처리\n  const handleSendMessage = async () => {\n    const userInput = document.getElementById('userInput').value.trim();\n    if (userInput) {\n      addMessage(userInput, true);\n      setMenuResponseList(prev => [...prev, userInput]);\n      setQuestionCount(prev => prev + 1);\n      if (questionCount <= 5) {\n        try {\n          const response = await axios.post('/api/menu-selection/recommend', {\n            menu_list: menuList,\n            menu_ques_list: menuQuestionList,\n            menu_res_list: [...menuResponseList, userInput]\n          });\n          const recommendedMenu = response.data.recommended_menu;\n          addMessage(`추천 메뉴: ${recommendedMenu.join(', ')}`, false);\n          addMessage('이 중에서 마음에 드는 메뉴가 있나요? 없다면 \"없음\"이라고 말씀해주세요.', false);\n          if (userInput.toLowerCase() === '없음') {\n            setMenuList(prev => prev.filter(menu => !recommendedMenu.includes(menu)));\n            await askQuestion();\n          } else if (recommendedMenu.includes(userInput)) {\n            await getRestaurants(userInput);\n          } else {\n            await askQuestion();\n          }\n        } catch (error) {\n          console.error('Error:', error);\n          addMessage('죄송합니다. 오류가 발생했습니다.', false);\n        }\n      } else {\n        addMessage('죄송합니다. 더 이상 질문할 수 없습니다. 추천된 메뉴 중에서 선택해주세요.', false);\n      }\n    }\n  };\n\n  // 질문 요청\n  const askQuestion = async () => {\n    try {\n      const response = await axios.post('/api/menu-selection/question', {\n        menu_list: menuList,\n        menu_res_list: menuResponseList\n      });\n      addMessage(response.data.menu_ques, false);\n      setMenuQuestionList(prev => [...prev, response.data.menu_ques]);\n    } catch (error) {\n      console.error('Error:', error);\n      addMessage('죄송합니다. 오류가 발생했습니다.', false);\n    }\n  };\n\n  // 식당 정보 요청\n  const getRestaurants = async selectedMenu => {\n    try {\n      const response = await axios.post('/api/get_restaurants', {\n        selected_menu: selectedMenu\n      });\n      const restaurants = response.data;\n      addMessage('어느 지역의 식당을 추천해드릴까요? (예: 고대사거리, 안암로터리 등)', false);\n    } catch (error) {\n      console.error('Error:', error);\n      addMessage('죄송합니다. 식당 정보를 가져오는 데 실패했습니다.', false);\n    }\n  };\n\n  // 메시지 추가 (사용자/봇)\n  const addMessage = (content, isUser) => {\n    const newMessage = {\n      content,\n      isUser\n    };\n    setMessages(prev => [...prev, newMessage]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: \"\\uCFE0\\uC787\\uB098\\uC6B0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.isUser ? 'user' : 'bot'}`,\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"userInput\",\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n        className: \"chat-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-button\",\n        children: \"\\u25B6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n_s(UserInputScreen, \"lqG1Ozqqpu3N2JCHDnJAKbSIPvU=\");\n_c = UserInputScreen;\nexport default UserInputScreen;\nvar _c;\n$RefreshReg$(_c, \"UserInputScreen\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","UserInputScreen","initialMenuList","_s","questionCount","setQuestionCount","menuList","setMenuList","menuQuestionList","setMenuQuestionList","menuResponseList","setMenuResponseList","messages","setMessages","handleSendMessage","userInput","document","getElementById","value","trim","addMessage","prev","response","post","menu_list","menu_ques_list","menu_res_list","recommendedMenu","data","recommended_menu","join","toLowerCase","filter","menu","includes","askQuestion","getRestaurants","error","console","menu_ques","selectedMenu","selected_menu","restaurants","content","isUser","newMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","id","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Kdonghoon/OneDrive/바탕 화면/midtermProject_combined/FE/src/components/UserInputScreen/UserInputScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './UserInputScreen.css';\r\n\r\nfunction UserInputScreen({ initialMenuList }) {\r\n    const [questionCount, setQuestionCount] = useState(0);\r\n    const [menuList, setMenuList] = useState(initialMenuList || []); // 이미 필터링된 메뉴 리스트\r\n    const [menuQuestionList, setMenuQuestionList] = useState([]);\r\n    const [menuResponseList, setMenuResponseList] = useState([]);\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    // 사용자 메시지 전송 및 질문 처리\r\n    const handleSendMessage = async () => {\r\n        const userInput = document.getElementById('userInput').value.trim();\r\n        if (userInput) {\r\n            addMessage(userInput, true);\r\n            setMenuResponseList((prev) => [...prev, userInput]);\r\n            setQuestionCount((prev) => prev + 1);\r\n\r\n            if (questionCount <= 5) {\r\n                try {\r\n                    const response = await axios.post('/api/menu-selection/recommend', {\r\n                        menu_list: menuList,\r\n                        menu_ques_list: menuQuestionList,\r\n                        menu_res_list: [...menuResponseList, userInput]\r\n                    });\r\n                    const recommendedMenu = response.data.recommended_menu;\r\n                    addMessage(`추천 메뉴: ${recommendedMenu.join(', ')}`, false);\r\n                    addMessage('이 중에서 마음에 드는 메뉴가 있나요? 없다면 \"없음\"이라고 말씀해주세요.', false);\r\n\r\n                    if (userInput.toLowerCase() === '없음') {\r\n                        setMenuList((prev) => prev.filter((menu) => !recommendedMenu.includes(menu)));\r\n                        await askQuestion();\r\n                    } else if (recommendedMenu.includes(userInput)) {\r\n                        await getRestaurants(userInput);\r\n                    } else {\r\n                        await askQuestion();\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error:', error);\r\n                    addMessage('죄송합니다. 오류가 발생했습니다.', false);\r\n                }\r\n            } else {\r\n                addMessage('죄송합니다. 더 이상 질문할 수 없습니다. 추천된 메뉴 중에서 선택해주세요.', false);\r\n            }\r\n        }\r\n    };\r\n\r\n    // 질문 요청\r\n    const askQuestion = async () => {\r\n        try {\r\n            const response = await axios.post('/api/menu-selection/question', {\r\n                menu_list: menuList,\r\n                menu_res_list: menuResponseList\r\n            });\r\n            addMessage(response.data.menu_ques, false);\r\n            setMenuQuestionList((prev) => [...prev, response.data.menu_ques]);\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            addMessage('죄송합니다. 오류가 발생했습니다.', false);\r\n        }\r\n    };\r\n\r\n    // 식당 정보 요청\r\n    const getRestaurants = async (selectedMenu) => {\r\n        try {\r\n            const response = await axios.post('/api/get_restaurants', { selected_menu: selectedMenu });\r\n            const restaurants = response.data;\r\n            addMessage('어느 지역의 식당을 추천해드릴까요? (예: 고대사거리, 안암로터리 등)', false);\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            addMessage('죄송합니다. 식당 정보를 가져오는 데 실패했습니다.', false);\r\n        }\r\n    };\r\n\r\n    // 메시지 추가 (사용자/봇)\r\n    const addMessage = (content, isUser) => {\r\n        const newMessage = { content, isUser };\r\n        setMessages((prev) => [...prev, newMessage]);\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <header className=\"chat-header\">쿠잇나우</header>\r\n            <div className=\"chat-messages\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.isUser ? 'user' : 'bot'}`}>\r\n                        {msg.content}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"chat-input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"userInput\"\r\n                    placeholder=\"메시지를 입력해주세요.\"\r\n                    className=\"chat-input\"\r\n                />\r\n                <button onClick={handleSendMessage} className=\"send-button\">\r\n                    ▶\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserInputScreen;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,eAAeA,CAAC;EAAEC;AAAgB,CAAC,EAAE;EAAAC,EAAA;EAC1C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAACK,eAAe,IAAI,EAAE,CAAC,CAAC,CAAC;EACjE,MAAM,CAACM,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMiB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC;IACnE,IAAIJ,SAAS,EAAE;MACXK,UAAU,CAACL,SAAS,EAAE,IAAI,CAAC;MAC3BJ,mBAAmB,CAAEU,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEN,SAAS,CAAC,CAAC;MACnDV,gBAAgB,CAAEgB,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;MAEpC,IAAIjB,aAAa,IAAI,CAAC,EAAE;QACpB,IAAI;UACA,MAAMkB,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,IAAI,CAAC,+BAA+B,EAAE;YAC/DC,SAAS,EAAElB,QAAQ;YACnBmB,cAAc,EAAEjB,gBAAgB;YAChCkB,aAAa,EAAE,CAAC,GAAGhB,gBAAgB,EAAEK,SAAS;UAClD,CAAC,CAAC;UACF,MAAMY,eAAe,GAAGL,QAAQ,CAACM,IAAI,CAACC,gBAAgB;UACtDT,UAAU,CAAC,UAAUO,eAAe,CAACG,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC;UACzDV,UAAU,CAAC,2CAA2C,EAAE,KAAK,CAAC;UAE9D,IAAIL,SAAS,CAACgB,WAAW,CAAC,CAAC,KAAK,IAAI,EAAE;YAClCxB,WAAW,CAAEc,IAAI,IAAKA,IAAI,CAACW,MAAM,CAAEC,IAAI,IAAK,CAACN,eAAe,CAACO,QAAQ,CAACD,IAAI,CAAC,CAAC,CAAC;YAC7E,MAAME,WAAW,CAAC,CAAC;UACvB,CAAC,MAAM,IAAIR,eAAe,CAACO,QAAQ,CAACnB,SAAS,CAAC,EAAE;YAC5C,MAAMqB,cAAc,CAACrB,SAAS,CAAC;UACnC,CAAC,MAAM;YACH,MAAMoB,WAAW,CAAC,CAAC;UACvB;QACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;UAC9BjB,UAAU,CAAC,oBAAoB,EAAE,KAAK,CAAC;QAC3C;MACJ,CAAC,MAAM;QACHA,UAAU,CAAC,4CAA4C,EAAE,KAAK,CAAC;MACnE;IACJ;EACJ,CAAC;;EAED;EACA,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACA,MAAMb,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,IAAI,CAAC,8BAA8B,EAAE;QAC9DC,SAAS,EAAElB,QAAQ;QACnBoB,aAAa,EAAEhB;MACnB,CAAC,CAAC;MACFU,UAAU,CAACE,QAAQ,CAACM,IAAI,CAACW,SAAS,EAAE,KAAK,CAAC;MAC1C9B,mBAAmB,CAAEY,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEC,QAAQ,CAACM,IAAI,CAACW,SAAS,CAAC,CAAC;IACrE,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BjB,UAAU,CAAC,oBAAoB,EAAE,KAAK,CAAC;IAC3C;EACJ,CAAC;;EAED;EACA,MAAMgB,cAAc,GAAG,MAAOI,YAAY,IAAK;IAC3C,IAAI;MACA,MAAMlB,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,IAAI,CAAC,sBAAsB,EAAE;QAAEkB,aAAa,EAAED;MAAa,CAAC,CAAC;MAC1F,MAAME,WAAW,GAAGpB,QAAQ,CAACM,IAAI;MACjCR,UAAU,CAAC,yCAAyC,EAAE,KAAK,CAAC;IAChE,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BjB,UAAU,CAAC,8BAA8B,EAAE,KAAK,CAAC;IACrD;EACJ,CAAC;;EAED;EACA,MAAMA,UAAU,GAAGA,CAACuB,OAAO,EAAEC,MAAM,KAAK;IACpC,MAAMC,UAAU,GAAG;MAAEF,OAAO;MAAEC;IAAO,CAAC;IACtC/B,WAAW,CAAEQ,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEwB,UAAU,CAAC,CAAC;EAChD,CAAC;EAED,oBACI7C,OAAA;IAAK8C,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3B/C,OAAA;MAAQ8C,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC7CnD,OAAA;MAAK8C,SAAS,EAAC,eAAe;MAAAC,QAAA,EACzBnC,QAAQ,CAACwC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACrBtD,OAAA;QAAiB8C,SAAS,EAAE,WAAWO,GAAG,CAACT,MAAM,GAAG,MAAM,GAAG,KAAK,EAAG;QAAAG,QAAA,EAChEM,GAAG,CAACV;MAAO,GADNW,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNnD,OAAA;MAAK8C,SAAS,EAAC,sBAAsB;MAAAC,QAAA,gBACjC/C,OAAA;QACIuD,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,WAAW;QACdC,WAAW,EAAC,gEAAc;QAC1BX,SAAS,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eACFnD,OAAA;QAAQ0D,OAAO,EAAE5C,iBAAkB;QAACgC,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAE5D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAChD,EAAA,CApGQF,eAAe;AAAA0D,EAAA,GAAf1D,eAAe;AAsGxB,eAAeA,eAAe;AAAC,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}