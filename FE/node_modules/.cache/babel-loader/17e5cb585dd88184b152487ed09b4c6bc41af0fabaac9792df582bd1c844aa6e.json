{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useLocation}from'react-router-dom';import axios from'axios';import'./UserInputScreen.css';import{jsx as _jsx}from\"react/jsx-runtime\";function UserInputScreen(){const[messages,setMessages]=useState([]);const[input,setInput]=useState('');const[menuList,setMenuList]=useState([]);const[questionCount,setQuestionCount]=useState(0);const[recommendedMenus,setRecommendedMenus]=useState([]);const location=useLocation();useEffect(()=>{const{menuList,selectedStore,budget}=location.state;setMenuList(menuList);setMessages([{sender:'character',text:`안녕하세요! 쿠잇나우입니다. ${selectedStore}에서 예산 ${budget}원으로 먹고 싶은 음식을 찾아보겠습니다.`}]);askQuestion(menuList,[]);},[location]);const askQuestion=async(currentMenuList,prevResponses)=>{try{const response=await axios.post('/api/menu-selection/question',{menu_list:currentMenuList,menu_res_list:prevResponses});setMessages(prev=>[...prev,{sender:'character',text:response.data.menu_ques}]);}catch(error){console.error('Error asking question:',error);}};const handleSendMessage=async()=>{if(input.trim()!==''){setMessages(prev=>[...prev,{sender:'user',text:input}]);setQuestionCount(prev=>prev+1);if(questionCount<5){try{const response=await axios.post('/api/menu-selection/recommend',{menu_list:menuList,menu_ques_list:messages.filter(msg=>msg.sender==='character').map(msg=>msg.text),menu_res_list:[...messages.filter(msg=>msg.sender==='user').map(msg=>msg.text),input]});const newRecommendedMenus=response.data.recommended_menu.split(',').map(m=>m.trim());setRecommendedMenus(newRecommendedMenus);setMessages(prev=>[...prev,{sender:'character',text:`추천 메뉴: ${newRecommendedMenus.join(', ')}`},{sender:'character',text:'이 중에서 마음에 드는 메뉴가 있나요? 있다면 선택해주세요. 없다면 \"없음\"이라고 말씀해주세요.'}]);}catch(error){console.error('Error recommending menu:',error);}}else{setMessages(prev=>[...prev,{sender:'character',text:'죄송합니다. 더 이상 질문할 수 없습니다. 추천된 메뉴 중에서 선택해주세요.'}]);}setInput('');}};const handleInputChange=e=>{setInput(e.target.value);};return/*#__PURE__*/_jsx(\"div\",{className:\"chat-container\"});}export default UserInputScreen;","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","jsx","_jsx","UserInputScreen","messages","setMessages","input","setInput","menuList","setMenuList","questionCount","setQuestionCount","recommendedMenus","setRecommendedMenus","location","selectedStore","budget","state","sender","text","askQuestion","currentMenuList","prevResponses","response","post","menu_list","menu_res_list","prev","data","menu_ques","error","console","handleSendMessage","trim","menu_ques_list","filter","msg","map","newRecommendedMenus","recommended_menu","split","m","join","handleInputChange","e","target","value","className"],"sources":["C:/Users/Kdonghoon/OneDrive/바탕 화면/midtermProject_combined/FE/src/components/UserLimitScreen2/UserLimitScreen2.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './UserInputScreen.css';\r\n\r\nfunction UserInputScreen() {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [menuList, setMenuList] = useState([]);\r\n    const [questionCount, setQuestionCount] = useState(0);\r\n    const [recommendedMenus, setRecommendedMenus] = useState([]);\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        const { menuList, selectedStore, budget } = location.state;\r\n        setMenuList(menuList);\r\n        setMessages([\r\n            { sender: 'character', text: `안녕하세요! 쿠잇나우입니다. ${selectedStore}에서 예산 ${budget}원으로 먹고 싶은 음식을 찾아보겠습니다.` }\r\n        ]);\r\n        askQuestion(menuList, []);\r\n    }, [location]);\r\n\r\n    const askQuestion = async (currentMenuList, prevResponses) => {\r\n        try {\r\n            const response = await axios.post('/api/menu-selection/question', {\r\n                menu_list: currentMenuList,\r\n                menu_res_list: prevResponses\r\n            });\r\n            setMessages(prev => [...prev, { sender: 'character', text: response.data.menu_ques }]);\r\n        } catch (error) {\r\n            console.error('Error asking question:', error);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        if (input.trim() !== '') {\r\n            setMessages(prev => [...prev, { sender: 'user', text: input }]);\r\n            setQuestionCount(prev => prev + 1);\r\n\r\n            if (questionCount < 5) {\r\n                try {\r\n                    const response = await axios.post('/api/menu-selection/recommend', {\r\n                        menu_list: menuList,\r\n                        menu_ques_list: messages.filter(msg => msg.sender === 'character').map(msg => msg.text),\r\n                        menu_res_list: [...messages.filter(msg => msg.sender === 'user').map(msg => msg.text), input]\r\n                    });\r\n                    const newRecommendedMenus = response.data.recommended_menu.split(',').map(m => m.trim());\r\n                    setRecommendedMenus(newRecommendedMenus);\r\n                    setMessages(prev => [\r\n                        ...prev,\r\n                        { sender: 'character', text: `추천 메뉴: ${newRecommendedMenus.join(', ')}` },\r\n                        { sender: 'character', text: '이 중에서 마음에 드는 메뉴가 있나요? 있다면 선택해주세요. 없다면 \"없음\"이라고 말씀해주세요.' }\r\n                    ]);\r\n                } catch (error) {\r\n                    console.error('Error recommending menu:', error);\r\n                }\r\n            } else {\r\n                setMessages(prev => [...prev, { sender: 'character', text: '죄송합니다. 더 이상 질문할 수 없습니다. 추천된 메뉴 중에서 선택해주세요.' }]);\r\n            }\r\n            setInput('');\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            {/* 기존 JSX 코드 유지 */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserInputScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}